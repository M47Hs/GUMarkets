{"version":3,"sources":["styles/GlobalStyle.js","components/Item.js","utils/apiCalls.js","components/Collection.js","utils/ImmutableXConnection.js","utils/getProtoCollection.js","components/Chart.js","components/Popup.js","pages/Home.js","utils/context.js","components/OwnedCard.js","components/OwnedCollection.js","components/OwnedPopup.js","pages/Account.js","assets/logo.png","components/Header.js","pages/Discounts.js","pages/Browse.js","components/NewOwners.js","pages/Details.js","index.js"],"names":["ImageWrapper","styled","div","BuyButton","button","SellButton","DefaultButton","SpinnerWrapper","Item","proto","to","token_proto","className","src","split","alt","onClick","apiAddress","COLLECTION_ADDRESS","toEthPrice","price","Math","pow","toFixed","getEthPrice","a","Axios","get","params","response","result","data","USD","console","log","getAllProtos","ImmutableXClient","build","publicApiUrl","config","headers","protos","getCheapestSellOrders","metadata","client","getOrders","page_size","status","sell_token_address","sell_metadata","order_by","direction","ordersRequest","orders","getCheapestUSDSellOrders","ethPrice","forEach","order","buy","quantity","getOrdersHistory","min_date","localStorage","getItem","cursor","ordersCursors","min_timestamp","concat","sort","b","updated_timestamp","localeCompare","getLastTrades","slice","getAssetInfo","id","url","infos","user","getLastTradesData","datas","trades","trade","tokenID","sell","owner","getAllOrdersHistory","h_prices","Map","unixtime","Date","parse","f_time","toLocaleDateString","day","month","dict","time","volume","Collection","showPopup","setPopup","useState","allProtos","setAllProtos","setProtos","isLoading","setLoading","myProtos","useEffect","initPage","type","placeholder","onChange","e","filteredResult","filter","JSON","name","toLowerCase","includes","target","value","Spinner","animation","map","link","Link","WALLET_ADDRESS","STARK_PUBLIC_KEY","setupAndLogin","setup","address","starkPublicKey","setItem","getAllUserAssets","assets","getAssets","collection","sell_orders","assetRequest","assetCursor","asset","isListed","length","sellAsset","priceInEth","sellParams","amount","tokenId","tokenAddress","token_address","pageSize","ordersCursor","getPriceHistory","has","res","set","key","fillOrder","orderId","fetchDiscounts","fetchBestPrice","popupCard","quality","bestOrder","minPrice","Number","MAX_SAFE_INTEGER","orderID","json","stringify","decimals","currentPrice","currentID","order_id","image_url","properties","Chart","history","setHistory","Init","ethprice","hprices","elem","setMonth","getMonth","toISOString","setTime","getTime","undefined","ComposedChart","width","height","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","dataKey","YAxis","yAxisId","Label","angle","position","style","textAnchor","orientation","domain","dataMax","Tooltip","Legend","Line","Bar","barSize","fill","Popup","setPrice","setOrderID","image","setImage","setQuality","error","setError","setEthPrice","setOrders","Pcontainer","init","aPrice","handleBuy","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","order_ethprice","order_usdprice","Footer","Button","variant","Home","LoggedContext","createContext","LoggedProvider","children","logged","setLogged","Provider","OwnedCard","card","setPopupCard","OwnedCollection","CardWrapper","allCards","setAllCards","cards","setCards","OwnedPopup","sellPrice","setSellPrice","myOrders","fetchCheapestSellOrders","handleSell","placeHolder","Account","useContext","setAddress","logAccount","NavContainer","nav","StyledLink","useHistory","alert","Logo","removeItem","push","Discounts","loadCollection","Browse","getProtos","NewOwners","setTrades","tradesData","Details","qualities","getQuality","useParams","toggleState","setToggleState","toggleTab","index","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.fde317e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nexport const ImageWrapper = styled.div`\r\ntransition: all .2s ease-in-out;\r\nborder-radius: 10px;\r\n&:hover{\r\n    transform:scale(1.1);\r\n}\r\n`\r\n\r\nexport const BuyButton = styled.button`\r\n  background-color: green;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const SellButton = styled.button`\r\n  background-color: red;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`;\r\n\r\nexport const DefaultButton = styled.button`\r\nbackground-color: grey;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  margin-top:10%;\r\n  display:flex;\r\n  justify-content : center;\r\n`","import { ImageWrapper } from '../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Item({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item","import { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport Axios from 'axios';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\n\r\nvar getUrlParams = function (url) {\r\n    var params = {};\r\n    (url + '?').split('?')[1].split('&').forEach(function (pair) {\r\n        pair = (pair + '=').split('=').map(decodeURIComponent);\r\n        if (pair[0].length) {\r\n            params[pair[0]] = pair[1];\r\n        }\r\n    });\r\n    return params;\r\n};\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport async function getAllProtos() {\r\n\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    let config = {\r\n        headers: { 'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s' },\r\n        params: {\r\n            'tokenAddress': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'\r\n        },\r\n    }\r\n    let url = 'https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders'\r\n    const response = await Axios(url, config)\r\n    const protos = response.data\r\n    return protos;\r\n\r\n\r\n}\r\n\r\nexport async function getCheapestSellOrders(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 5,\r\n        status: 'active',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'buy_quantity',\r\n        direction: 'asc'\r\n    });\r\n    return { orders: ordersRequest.result };\r\n}\r\n\r\n\r\n\r\nexport async function getCheapestUSDSellOrders(metadata) {\r\n    const { orders } = await getCheapestSellOrders(metadata)\r\n    const ethPrice = await getEthPrice();\r\n    orders.forEach((order) => {\r\n        order.buy.data.quantity = (order.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n    })\r\n    return { orders: orders }\r\n}\r\n\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\nexport async function getLastTrades(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 30,\r\n        status: 'filled',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'timestamp',\r\n        direction: 'asc'\r\n    });\r\n    ordersRequest.result.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    return ordersRequest.result.slice(0, 5);\r\n\r\n}\r\n\r\nexport async function getAssetInfo(id) {\r\n\r\n    let url = `https://api.x.immutable.com/v1/assets/${COLLECTION_ADDRESS}/${id}`\r\n    const response = await Axios(url)\r\n    const infos = response.data\r\n    return infos.user\r\n}\r\nexport async function getLastTradesData(metadata) {\r\n    const ethPrice = await getEthPrice();\r\n\r\n    let datas = [];\r\n    try {\r\n        const trades = await getLastTrades(metadata);\r\n        for (const trade of trades) {\r\n            let tokenID = trade.sell.data.id;\r\n            let owner = await getAssetInfo(tokenID)\r\n            let price = (trade.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            datas = datas.concat({ tokenID: tokenID, owner: owner, price: price })\r\n        }\r\n\r\n        return datas;\r\n    } catch (err) { console.log(err) }\r\n}\r\n\r\nexport async function getAllOrdersHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            price = (+toEthPrice(order.buy.data.quantity))\r\n            price.toFixed(6)\r\n            let dict = {\r\n                time: f_time,\r\n                data: {\r\n                    price: price,\r\n                    volume: 0\r\n                },\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        });\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\ngetCheapestUSDSellOrders();","import { useState, useEffect } from 'react'\r\nimport Item from './Item'\r\nimport '../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Collection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [protos, setProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getAllProtos();\r\n        setAllProtos(myProtos)\r\n        setProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(protos)\r\n    }, [protos])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allProtos.filter((proto) => {\r\n            let metadata = JSON.parse(proto.metadata)\r\n            return metadata.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n        })\r\n\r\n        setProtos(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {protos.map((proto) => (\r\n\r\n                            <Item key={`${proto.token_proto}`} proto={proto}></Item>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Collection","//ImmutableXConnection.js\r\n//Sample Immutable X functions for collection interaction\r\n\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst linkAddress = 'https://link.x.immutable.com';\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n// Ropsten Testnet\r\n//const linkAddress = 'https://link.uat.x.immutable.com';\r\n//const apiAddress = 'https://api.uat.x.immutable.com/v1';\r\n\r\n//The token address for the collection to be monitored. Currently set to Gods Unchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\nconst link = new Link(linkAddress);\r\n\r\n\r\nconst WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nconst STARK_PUBLIC_KEY = 'STARK_PUBLIC_KEY';\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// User Account Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n//Creates or logs a user into their Immutable X account via web3 wallet\r\nexport async function setupAndLogin() {\r\n    const { address, starkPublicKey } = await link.setup({});\r\n    localStorage.setItem(WALLET_ADDRESS, address);\r\n    localStorage.setItem(STARK_PUBLIC_KEY, starkPublicKey);\r\n}\r\n\r\n//Remove the local storage wallet address\r\nexport function logout() {\r\n    localStorage.removeItem('WALLET_ADDRESS');\r\n}\r\n\r\n//Get the user balances\r\nexport async function getUserBalances() {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    return await client.getBalances({ user: address });\r\n}\r\n\r\n//Deposits ETH into Immutable X\r\nexport async function depositEth(amountInEth) {\r\n    await link.deposit({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Starts the withdrawal process from Immutable X\r\nexport async function prepareWithdrawal(amountInEth) {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Finishes the withdrawal process from Immutable X\r\n//Must wait for user balance to have ETH in the withdrawable state \r\nexport async function completeWithdrawal() {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH\r\n    });\r\n}\r\n\r\n//Show user history\r\nexport async function showUserHistory() {\r\n    link.history({});\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////// Asset Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the user's assets\r\n * @param {string} assetCursor - optional cursor parameter \r\n * @returns Object containing the assets and a cursor if more assets remain to be retrieved\r\n */\r\nexport async function getUserAssets(assetCursor) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    const assetsRequest = await client.getAssets({ user: address, cursor: assetCursor, status: 'imx', collection: COLLECTION_ADDRESS });\r\n    return { assets: assetsRequest.result, cursor: assetsRequest.cursor };\r\n}\r\n\r\n\r\nexport async function getAllUserAssets() {\r\n    let assetCursor;\r\n    let assets = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let assetRequest = await client.getAssets({ user: address, status: 'imx', collection: COLLECTION_ADDRESS, sell_orders: true });\r\n            assets = assets.concat(assetRequest.result);\r\n            assetCursor = assetRequest.cursor;\r\n\r\n        } while (assetCursor);\r\n\r\n        for (let asset of assets) {\r\n            asset.isListed = false;\r\n            if (asset.orders?.sell_orders?.length > 0) {\r\n                asset.isListed = true;\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return assets;\r\n    }\r\n\r\n}\r\n\r\n//Opens the Link SDK popup to sell an asset as the specified price\r\nexport async function sellAsset(asset, priceInEth) {\r\n    let sellParams = { amount: priceInEth, tokenId: asset.id, tokenAddress: asset.token_address };\r\n    //Throws an error if not successful\r\n    await link.sell(sellParams);\r\n}\r\n\r\n//Transfers an asset to another address\r\nexport async function transferERC721(asset, addressToSendTo) {\r\n    await link.transfer({\r\n        type: ERC721TokenType.ERC721,\r\n        tokenId: asset.id,\r\n        tokenAddress: asset.token_address,\r\n        to: addressToSendTo\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n///////////////////////// Marketplace Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the cheapest active orders for the collection\r\n * @param {*} ordersCursor - optional cursor parameter \r\n * @param {*} tokenName - optional token name to filter on \r\n * @param {*} metadata - optional JSON string metadata to filter on \r\n * @returns Object containing the cheapest orders and a cursor if more orders remain\r\n */\r\nexport async function getCheapestSellOrders(pageSize, ordersCursor, metadata) {\r\n    try {\r\n        const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n        const ordersRequest = await client.getOrders({\r\n            page_size: pageSize,\r\n            cursor: ordersCursor,\r\n            status: 'active',\r\n            sell_token_address: COLLECTION_ADDRESS,\r\n            sell_metadata: metadata,\r\n            order_by: 'buy_quantity',\r\n            direction: 'asc'\r\n        });\r\n        return { orders: ordersRequest.result, cursor: ordersRequest.cursor };\r\n    } catch (err) {\r\n        console.log(err)\r\n\r\n    }\r\n}\r\n\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        console.log(orders)\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\nexport async function getPriceHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n//Opens the Link SDK popup to complete an order\r\nexport async function fillOrder(order) {\r\n    await link.buy({ orderId: order });\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////","import Axios from \"axios\"\r\n\r\nexport const fetchProtoCollection = async () => {\r\n    let url = 'https://api.godsunchained.com/v0/proto?perPage=2000'\r\n    const response = await Axios(url)\r\n    const assets = response.data.records\r\n    return assets;\r\n\r\n}\r\n\r\nexport const fetchDiscounts = async () => {\r\n    let url = 'https://gumarkets.freeboxos.fr:5000/discounts'\r\n    const response = await Axios(url)\r\n    const result = response.data\r\n    return result;\r\n\r\n}\r\n\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\nexport const fetchBestPrice = async (popupCard, quality) => {\r\n    var result = null\r\n    var bestOrder = {\r\n        minPrice: Number.MAX_SAFE_INTEGER,\r\n        orderID: null\r\n    };\r\n    let url = 'https://api.x.immutable.com/v1/orders'\r\n    const json = JSON.stringify(\r\n        {\r\n            \"proto\": [`${popupCard.id}`],\r\n            \"quality\": [`${quality}`]\r\n        }\r\n    );\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    sell_metadata: json,\r\n                    status: 'active',\r\n                    order_by: 'buy_quantity',\r\n                    direction: 'asc',\r\n\r\n                }\r\n            })\r\n        result = response.data.result\r\n        result.map((order) => {\r\n\r\n            let quantity = order.buy.data.quantity\r\n            let decimals = order.buy.data.decimals\r\n            let currentPrice = (quantity * Math.pow(10, -decimals)).toFixed(6)\r\n            let currentID = order.order_id\r\n            if (bestOrder.minPrice > currentPrice) {\r\n                bestOrder.minPrice = currentPrice;\r\n                bestOrder.orderID = currentID;\r\n            }\r\n        })\r\n\r\n        var image_url = result[0].sell.data.properties.image_url;\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return {\r\n            result,\r\n            bestOrder,\r\n            image_url\r\n        };\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n","import {\r\n    ComposedChart,\r\n    Line,\r\n    Area,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    Scatter,\r\n    ResponsiveContainer,\r\n    Label,\r\n} from 'recharts';\r\nimport { getEthPrice } from '../utils/getProtoCollection.js';\r\nimport { getPriceHistory } from '../utils/ImmutableXConnection.js'\r\nimport { getAllOrdersHistory } from '../utils/apiCalls.js';\r\nimport { useState, useEffect } from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { SpinnerWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Chart({ proto, quality, type }) {\r\n    const [history, setHistory] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const Init = async (proto, quality, min_date, type) => {\r\n        setLoading(true)\r\n        console.log(min_date)\r\n        //get price history\r\n        const json = JSON.stringify(\r\n            {\r\n                \"proto\": [`${proto}`],\r\n                \"quality\": [`${quality}`]\r\n            }\r\n        );\r\n        const ethprice = await getEthPrice()\r\n\r\n        if (type === \"month-avg\") {\r\n            const hprices = await getPriceHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"month-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"week-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let min_date;\r\n        switch (type) {\r\n            case (\"month-avg\" || \"month-detailed\"):\r\n                min_date = new Date()\r\n                min_date.setMonth(min_date.getMonth() - 1)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            case \"week-detailed\":\r\n                min_date = new Date()\r\n                min_date.setTime(min_date.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            default:\r\n                min_date = undefined;\r\n        }\r\n        console.log(type)\r\n        console.log(min_date)\r\n        Init(proto, quality, min_date, type)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <SpinnerWrapper>\r\n                    <Spinner animation=\"grow\" /> </SpinnerWrapper>\r\n                :\r\n                <div className=\"d-flex align-items-center\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={400}\r\n                        data={history}\r\n                        margin={{\r\n                            top: 20,\r\n                            right: 20,\r\n                            bottom: 20,\r\n                            left: 20,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#f5f5f5\" />\r\n                        <XAxis dataKey=\"time\" />\r\n                        <YAxis yAxisId=\"left\" dataKey=\"data.price\">\r\n                            <Label angle={270} position='left' style={{ textAnchor: 'middle' }}>\r\n                                USD price\r\n                            </Label>\r\n                        </YAxis>\r\n                        <YAxis yAxisId=\"right\" dataKey=\"data.volume\" orientation=\"right\" domain={[0, dataMax => (dataMax * 5)]}>\r\n                            <Label angle={90} position='right' style={{ textAnchor: 'middle' }}>\r\n                                Volume\r\n                            </Label>\r\n                        </YAxis>\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"data.price\" stroke=\"#8884d8\" />\r\n                        <Bar yAxisId=\"right\" dataKey=\"data.volume\" barSize={5} fill=\"#413ea0\" />\r\n\r\n                    </ComposedChart>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { sellAsset, fillOrder, getOrdersHistory, getCheapestSellOrders, getPriceHistory, toEthPrice } from '../utils/ImmutableXConnection.js'\r\nimport { fetchBestPrice, getEthPrice } from '../utils/getProtoCollection'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nfunction Popup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [orderID, setOrderID] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [quality, setQuality] = useState(\"Meteorite\")\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [ethPrice, setEthPrice] = useState(null);\r\n    const [orders, setOrders] = useState([])\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n  display:flex;\r\n  flex-direction:row;\r\n  justify-content : center;\r\n  align-items:center;\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const { result, bestOrder, image_url } = await fetchBestPrice(popupCard, quality);\r\n            console.log(result, bestOrder, image_url)\r\n            setOrders(result.slice(0, 5))\r\n            setPrice(bestOrder.minPrice)\r\n            setOrderID(bestOrder.orderID)\r\n            const aPrice = await getEthPrice();\r\n            setEthPrice(aPrice);\r\n            setImage(image_url)\r\n            if (bestOrder.orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [quality])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleMeteorite = () => {\r\n        setQuality(\"Meteorite\")\r\n\r\n    }\r\n    const handleShadow = () => {\r\n        setQuality(\"Shadow\")\r\n\r\n    }\r\n    const handleGold = () => {\r\n        setQuality(\"Gold\")\r\n\r\n    }\r\n\r\n    const handleDiamond = () => {\r\n        setQuality(\"Diamond\")\r\n    }\r\n\r\n    const handleSell = () => {\r\n        sellAsset('0x843279e9ee4e64ff7a4d8743df80e5a914ff8053ee40a15b6d7b6a5b195e8375', '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c', 0.01)\r\n    }\r\n\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        error ? <h5>this card is not available for trade</h5> :\r\n                            <div>\r\n                                <p>Quality : {quality}</p>\r\n                                <p>Price : {price} ETH - {(price * ethPrice).toFixed(2)} USD</p>\r\n                                <Pcontainer>\r\n                                    <img src={image} alt={popupCard.id}></img>\r\n                                    <Chart proto={popupCard.id} quality={quality} />\r\n                                </Pcontainer>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <p>For sale:\r\n                                        {orders.map((order) => {\r\n                                            const order_ethprice = toEthPrice(order.buy.data.quantity)\r\n                                            const order_usdprice = (order_ethprice * ethPrice).toFixed(2)\r\n                                            return (\r\n                                                <p><BuyButton value={order.order_id} onClick={handleBuy}>{order_usdprice} USD </BuyButton> : {order_ethprice} ETH</p>\r\n                                            )\r\n                                        }\r\n                                        )}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                    }\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleMeteorite}>\r\n                        Meteorite\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleShadow}>\r\n                        Shadow\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={handleGold}>\r\n                        Gold\r\n                    </Button>\r\n                    <Button variant=\"link\" onClick={handleDiamond}>\r\n                        Diamond\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Popup","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\n\r\nfunction Home() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} loadCollection={fetchProtoCollection} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { useState, createContext } from 'react'\r\n\r\nexport const LoggedContext = createContext()\r\n\r\nexport const LoggedProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(localStorage.getItem('WALLET_ADDRESS') !== null)\r\n\r\n    return (\r\n        <LoggedContext.Provider value={{ logged, setLogged }}>\r\n            {children}\r\n        </LoggedContext.Provider>\r\n    )\r\n}","\r\nimport { ImageWrapper } from '../styles/GlobalStyle'\r\n\r\n\r\nfunction OwnedCard({ card, showPopup, setPopup, popupCard, setPopupCard }) {\r\n\r\n\r\n\r\n    const handleClick = () => {\r\n        setPopup(!showPopup)\r\n        setPopupCard(card)\r\n    }\r\n\r\n    return (\r\n        <div className=\"lol\">\r\n            <li key={card.id}>\r\n                <ImageWrapper>\r\n                    <img className='nft-item-cover' src={card.image_url} alt={`${card.id} cover`} onClick={handleClick} />\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OwnedCard","import { useState, useEffect } from 'react'\r\nimport OwnedCard from './OwnedCard'\r\nimport styled from 'styled-components'\r\nimport '../styles/Collection.css'\r\nimport { getAllUserAssets } from '../utils/ImmutableXConnection'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nfunction OwnedCollection({ showPopup, setPopup, popupCard, setPopupCard }) {\r\n\r\n\r\n\r\n    const CardWrapper = styled.div`\r\n    \r\n  `\r\n\r\n    const [allCards, setAllCards] = useState([])\r\n    const [cards, setCards] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        try {\r\n            const assets = await getAllUserAssets();\r\n            setCards(assets)\r\n            setAllCards(assets)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(cards)\r\n    }, [cards])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allCards.filter((card) => card.name.toLowerCase().includes(e.target.value.toLowerCase()))\r\n        setCards(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" onChange={handleInput} placeholder=\"Search a card\" />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {cards.map((card) => (\r\n                            <CardWrapper>\r\n                                <OwnedCard key={card.id} card={card} showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n                            </CardWrapper>\r\n                        )\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default OwnedCollection","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { toEthPrice } from '../utils/getProtoCollection'\r\nimport { sellAsset, fillOrder, getCheapestSellOrders } from '../utils/ImmutableXConnection.js'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\nfunction OwnedPopup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [sellPrice, setSellPrice] = useState(null)\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    async function fetchCheapestSellOrders() {\r\n        setLoading(true)\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${popupCard.metadata.proto}`],\r\n                    \"quality\": [`${popupCard.metadata.quality}`]\r\n                }\r\n            );\r\n            const myOrders = await getCheapestSellOrders(5, '', json)\r\n            setOrders(myOrders.orders)\r\n            console.log(myOrders)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCheapestSellOrders();\r\n    }, [])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleSell = async () => {\r\n        console.log(\"SELL ORDER\", sellPrice)\r\n        console.log(\"asset ID\", popupCard.id);\r\n        console.log(\"tokenAddress\", popupCard.token_address)\r\n        try {\r\n            await sellAsset(popupCard, sellPrice);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setSellPrice(e.target.value)\r\n    }\r\n\r\n    const handleBuy = (e) => {\r\n        console.log(e.target.value)\r\n        fillOrder(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.metadata.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        <div>\r\n                            <p>Quality : {popupCard.metadata.quality}</p>\r\n                            <Pcontainer>\r\n                                <img src={popupCard.image_url} alt={popupCard.id}></img>\r\n                                <Chart proto={popupCard.metadata.proto} quality={popupCard.metadata.quality} />\r\n                            </Pcontainer>\r\n                            <p>For sale:\r\n                                {orders.map((order) => (\r\n                                    <p><BuyButton value={order.order_id} onClick={handleBuy}>BUY</BuyButton> : {toEthPrice(order.buy.data.quantity)} </p>\r\n                                )\r\n                                )}</p>\r\n                        </div>\r\n                    }\r\n                </Modal.Body >\r\n                <Modal.Footer>\r\n                    <div className=\"container d-flex content-center\">\r\n                        <input type=\"text\" name=\"ethprice\" placeHolder=\"eth Price\" onChange={handleChange} />\r\n                        <SellButton onClick={handleSell}>Sell yours</SellButton>\r\n                    </div>\r\n                </Modal.Footer>\r\n            </Modal >\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OwnedPopup","import { setupAndLogin } from '../utils/ImmutableXConnection'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useEffect, useState, useContext } from 'react'\r\n\r\nimport OwnedCollection from '../components/OwnedCollection'\r\nimport OwnedPopup from '../components/OwnedPopup'\r\n\r\nfunction Account() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [address, setAddress] = useState('')\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n\r\n\r\n    async function logAccount() {\r\n        if (!logged) {\r\n            try {\r\n                await setupAndLogin()\r\n                setLogged(true)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n                setLogged(false)\r\n            }\r\n        }\r\n        setAddress(localStorage.getItem('WALLET_ADDRESS'))\r\n    }\r\n\r\n    useEffect(() => {\r\n        logAccount();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <OwnedCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} user={address} />\r\n            {showPopup ?\r\n                <OwnedPopup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account","export default __webpack_public_path__ + \"static/media/logo.aac3612d.png\";","import '../styles/Header.css'\r\nimport styled from 'styled-components'\r\nimport Logo from '../assets/logo.png'\r\nimport { Link } from 'react-router-dom'\r\nimport { setupAndLogin, logout } from '../utils/ImmutableXConnection'\r\nimport { useContext } from 'react'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DefaultButton } from '../styles/GlobalStyle'\r\n\r\nfunction Header() {\r\n\r\n    const NavContainer = styled.nav`\r\n  padding: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n    const StyledLink = styled(Link)`\r\n  padding: 10px 15px;\r\n  color: #c4fffc;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  text-align: center;\r\n`\r\n\r\n\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const history = useHistory();\r\n\r\n    async function handleConnect() {\r\n        if (logged) {\r\n            alert(\"user already connected\")\r\n        }\r\n        else {\r\n            async function logAccount() {\r\n                try {\r\n                    await setupAndLogin()\r\n                    setLogged(true)\r\n                }\r\n                catch (err) {\r\n                    console.log(err)\r\n                    setLogged(false)\r\n                }\r\n            }\r\n            logAccount();\r\n        }\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        if (logged) {\r\n            logout();\r\n            setLogged(false)\r\n            let path = `/browse`;\r\n            history.push(path);\r\n            alert(\"user disconnecterd\")\r\n        }\r\n        else {\r\n            alert(\"user not logged in\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex headerWrapper\">\r\n            <div className=\"d-flex\">\r\n                <img src={Logo} className=\"mainLogo\" alt=\"mainLogo\" />\r\n            </div>\r\n            <div className=\"d-flex\">\r\n\r\n            </div>\r\n            <NavContainer>\r\n                {logged ? <DefaultButton onClick={handleDisconnect}>Disconnect</DefaultButton> : (<DefaultButton onClick={handleConnect}>Connect</DefaultButton>)}\r\n                <StyledLink className=\"link\" to=\"/browse\" >Browse Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/account\">Your Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/discounts\">Discounts</StyledLink>\r\n            </NavContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchDiscounts } from '../utils/getProtoCollection'\r\n\r\nfunction Discounts() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} loadCollection={fetchDiscounts} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Discounts","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Browse() {\r\n\r\n    //Dans la page Browse, on affiche la totalité des ordres (uniques) en \r\n\r\n    const [protos, setProtos] = useState([])\r\n\r\n    const getProtos = (async () => {\r\n        try {\r\n            var myProtos = await getAllProtos();\r\n            setProtos(myProtos)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProtos();\r\n        console.log(protos)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Browse","\r\nimport { useState, useEffect } from 'react'\r\nimport { getLastTradesData, getOrdersHistory, getLastTrades } from '../utils/apiCalls'\r\n\r\nfunction NewOwners({ proto, quality }) {\r\n\r\n    const [trades, setTrades] = useState([])\r\n\r\n    async function init() {\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${quality}`]\r\n                }\r\n            );\r\n            const tradesData = await getLastTradesData(json);\r\n            setTrades(tradesData.slice(0, 5))\r\n        } catch (err) { console.log(err) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n        console.log(trades)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {trades.map((trade) => (\r\n                    <li>owner : {trade.owner}, price:{trade.price}, NFT_id : {trade.tokenID}</li>\r\n                ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewOwners;","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getCheapestUSDSellOrders } from '../utils/apiCalls'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport styled from \"styled-components\";\r\nimport Chart from '../components/Chart'\r\nimport { BuyButton } from '../styles/GlobalStyle'\r\nimport { fillOrder } from '../utils/ImmutableXConnection'\r\nimport '../styles/details.css'\r\nimport NewOwners from \"../components/NewOwners\";\r\n\r\n\r\n\r\nfunction Details() {\r\n\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    var qualities = {\r\n        4: \"Meteorite\",\r\n        3: \"Shadow\",\r\n        2: \"Gold\",\r\n        1: \"Diamond\"\r\n    };\r\n\r\n    const getQuality = (key) => { return qualities[key] }\r\n\r\n    const { id } = useParams();\r\n    const [proto, quality] = id.split('-')\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const [toggleState, setToggleState] = useState(1);\r\n    const toggleTab = (index) => {\r\n        setToggleState(index);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${getQuality(quality)}`]\r\n                }\r\n            );\r\n            const { orders } = await getCheapestUSDSellOrders(json)\r\n            console.log(orders)\r\n            setPrice(orders[0].buy.data.quantity)\r\n            if (orders[0].orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [])\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ?\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <Spinner animation=\"grow\" /> </div>\r\n                :\r\n                error ? <h5>this card is not available for trade</h5> :\r\n\r\n                    <div>\r\n                        <div className=\"bloc-tabs\">\r\n                            <button\r\n                                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(1)}\r\n                            >\r\n                                General info\r\n                            </button>\r\n                            <button\r\n                                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(2)}\r\n                            >\r\n                                Detailed Info\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"content-tabs\">\r\n                            <div\r\n                                className={toggleState === 1 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <Pcontainer>\r\n                                    <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n                                    <Chart proto={proto} quality={getQuality(quality)} type={\"month-avg\"} />\r\n\r\n                                </Pcontainer>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <p>For sale:\r\n                                        {orders.map((order) => {\r\n                                            return (\r\n                                                <p><BuyButton value={order.order_id} onClick={handleBuy}>{price} USD </BuyButton></p>\r\n                                            )\r\n                                        }\r\n                                        )}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className={toggleState === 2 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n\r\n                                <Pcontainer>\r\n                                    <Chart proto={proto} quality={getQuality(quality)} type={\"month-detailed\"} />\r\n\r\n                                </Pcontainer>\r\n                                <Pcontainer>\r\n                                    <Chart proto={proto} quality={getQuality(quality)} type={\"week-detailed\"} />\r\n\r\n                                </Pcontainer>\r\n\r\n                                <div className=\"last trades\">\r\n                                    Last trades :\r\n                                    <NewOwners proto={proto} quality={getQuality(quality)} />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Details","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport LinkWrapper from './components/LinkWrapper';\r\nimport Home from './pages/Home'\r\nimport Account from './pages/Account'\r\nimport Header from './components/Header'\r\nimport Discounts from './pages/Discounts'\r\nimport Browse from './pages/Browse'\r\nimport Details from './pages/Details'\r\nimport { LoggedProvider } from './utils/context'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<LoggedProvider>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Route exact path=\"/godsunchained\">\r\n\t\t\t\t\t<Redirect to=\"/godsunchained/browse\" />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/browse\">\r\n\t\t\t\t\t<Browse />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/account\">\r\n\t\t\t\t\t<Account />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/discounts\">\r\n\t\t\t\t\t<Discounts />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/protos/:id\">\r\n\t\t\t\t\t<Details />\r\n\t\t\t\t</Route>\r\n\t\t\t</LoggedProvider>\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n"],"sourceRoot":""}