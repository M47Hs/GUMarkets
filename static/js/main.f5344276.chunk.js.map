{"version":3,"sources":["styles/GlobalStyle.js","components/Item.js","utils/apiCalls.js","components/Collection.js","utils/ImmutableXConnection.js","utils/getProtoCollection.js","components/Chart.js","components/Popup.js","pages/Home.js","utils/context.js","components/OwnedCard.js","components/OwnedCollection.js","components/OwnedPopup.js","pages/Account.js","assets/logo.png","components/Header.js","components/Discounts/DiscountItem.js","components/Discounts/DiscountsCollection.js","pages/Discounts.js","pages/Browse.js","components/NewOwners.js","components/Details/GeneralTab.js","components/Details/DetailedTab.js","pages/Details.js","components/Users/useGetNFTs.js","components/Users/useCard.js","components/Users/Card.js","components/Users/CardsList.js","pages/User.js","index.js"],"names":["ImageWrapper","styled","div","BuyButton","button","SellButton","DefaultButton","SpinnerWrapper","Item","proto","to","token_proto","className","src","split","alt","onClick","apiAddress","COLLECTION_ADDRESS","toEthPrice","price","Math","pow","toFixed","getEthPrice","a","Axios","get","params","response","result","data","USD","console","log","getAllProtos","ImmutableXClient","build","publicApiUrl","config","headers","protos","getCheapestSellOrders","metadata","client","getOrders","page_size","status","sell_token_address","sell_metadata","order_by","direction","ordersRequest","orders","getCheapestUSDSellOrders","ethPrice","forEach","order","buy","quantity","getOrdersHistory","min_date","localStorage","getItem","cursor","ordersCursors","min_timestamp","concat","sort","b","updated_timestamp","localeCompare","getLastTrades","slice","getAssetInfo","id","url","infos","user","getLastTradesData","datas","trades","trade","tokenID","sell","owner","uptime","Date","parse","timestamp","getAvgDailyPrice","h_prices","map","Map","unixtime","f_time","toLocaleDateString","day","month","has","res","volume","set","value","key","dict","time","getAllOrdersHistory","getDiscounts","Collection","showPopup","setPopup","useState","allProtos","setAllProtos","setProtos","isLoading","setLoading","myProtos","useEffect","initPage","type","placeholder","onChange","e","filteredResult","filter","JSON","name","toLowerCase","includes","target","Spinner","animation","link","Link","WALLET_ADDRESS","STARK_PUBLIC_KEY","setupAndLogin","setup","address","starkPublicKey","setItem","getAllUserAssets","assets","getAssets","collection","sell_orders","assetRequest","assetCursor","asset","isListed","length","sellAsset","priceInEth","sellParams","amount","tokenId","tokenAddress","token_address","pageSize","ordersCursor","fillOrder","orderId","fetchBestPrice","popupCard","quality","bestOrder","minPrice","Number","MAX_SAFE_INTEGER","orderID","json","stringify","decimals","currentPrice","currentID","order_id","image_url","properties","Chart","history","setHistory","Init","ethprice","hprices","elem","setMonth","getMonth","toISOString","setTime","getTime","undefined","ComposedChart","width","height","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","dataKey","YAxis","yAxisId","Label","angle","position","style","textAnchor","orientation","domain","dataMax","Tooltip","Legend","Line","Bar","barSize","fill","Popup","setPrice","setOrderID","image","setImage","setQuality","error","setError","setEthPrice","setOrders","Pcontainer","init","aPrice","handleBuy","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","order_ethprice","order_usdprice","Footer","Button","variant","Home","LoggedContext","createContext","LoggedProvider","children","logged","setLogged","Provider","OwnedCard","card","setPopupCard","OwnedCollection","CardWrapper","allCards","setAllCards","cards","setCards","OwnedPopup","sellPrice","setSellPrice","myOrders","fetchCheapestSellOrders","handleSell","placeHolder","Account","useContext","setAddress","logAccount","NavContainer","nav","StyledLink","search","setSearch","useHistory","alert","Logo","removeItem","push","DiscountItem","diff","DiscountsCollection","Object","keys","Discounts","Browse","getProtos","NewOwners","setTrades","tradesData","GeneralTab","getQuality","DetailedTab","Details","qualities","useParams","toggleState","setToggleState","toggleTab","index","useGetNFTs","setData","c","axios","resData","getAllAssets","useCard","buyPrice","setBuyPrice","setProto","amount_sold","join","getBuyPrice","Card","actualPrice","CardsList","User","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.f5344276.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nexport const ImageWrapper = styled.div`\r\ntransition: all .2s ease-in-out;\r\nborder-radius: 10px;\r\n&:hover{\r\n    transform:scale(1.1);\r\n}\r\n`\r\n\r\nexport const BuyButton = styled.button`\r\n  background-color: green;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const SellButton = styled.button`\r\n  background-color: red;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`;\r\n\r\nexport const DefaultButton = styled.button`\r\nbackground-color: grey;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  margin-top:10%;\r\n  display:flex;\r\n  justify-content : center;\r\n`","import { ImageWrapper } from '../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Item({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item","import { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport Axios from 'axios';\r\nimport { createPortal } from 'react-dom';\r\n\r\n//api endpoint de immuX\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n//adresse ETH de la collection GodsUnchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\n\r\n\r\n/**\r\n * \r\n * @param {*} price \r\n * @returns {string} La conversion du prix en Gwei en prix en eth\r\n */\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @returns {*} le prix de l'eth en USD\r\n */\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * @returns {string}  une liste contenant tous les protos , metadata et leurs prix minimum\r\n */\r\nexport async function getAllProtos() {\r\n\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    let config = {\r\n        headers: { 'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s' },\r\n        params: {\r\n            'tokenAddress': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'\r\n        },\r\n    }\r\n    let url = 'https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders'\r\n    const response = await Axios(url, config)\r\n    const protos = response.data\r\n    return protos;\r\n\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns les 5 ordres de ventes les moins chers\r\n */\r\nexport async function getCheapestSellOrders(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 5,\r\n        status: 'active',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'buy_quantity',\r\n        direction: 'asc'\r\n    });\r\n    return { orders: ordersRequest.result };\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * Convertit le prix des ordres retours de getCheapestSellOrders en USD\r\n * @returns les 5 ordres de vente les moins chers, prix converti en USD\r\n */\r\nexport async function getCheapestUSDSellOrders(metadata) {\r\n    const { orders } = await getCheapestSellOrders(metadata)\r\n    const ethPrice = await getEthPrice();\r\n    orders.forEach((order) => {\r\n        order.buy.data.quantity = (order.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n    })\r\n    return { orders: orders }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @param {*} min_date à partir de quand on récupère les données (1 mois max)\r\n * @returns liste des ventes triées par updated_timestamp croissant\r\n */\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp CROISSANT pour avoir les ordres dans l'ordre chronologique\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        //on trie la liste selon le updated_timestamp croissant\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns \r\n */\r\nexport async function getLastTrades(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp DECROISSANT pour avoir les derniers ordres publiés\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 30,\r\n        status: 'filled',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'timestamp',\r\n        direction: 'desc'\r\n    });\r\n    //trier par updated_timestamp décroissant ()\r\n    ordersRequest.result.sort((a, b) => (b.updated_timestamp.localeCompare(a.updated_timestamp)));\r\n    return ordersRequest.result.slice(0, 5);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} id \r\n * @returns infos sur l'asset en question : {id, owner, name, metadata, creation time...}\r\n */\r\nexport async function getAssetInfo(id) {\r\n\r\n    let url = `https://api.x.immutable.com/v1/assets/${COLLECTION_ADDRESS}/${id}`\r\n    const response = await Axios(url)\r\n    const infos = response.data\r\n    return infos.user\r\n}\r\nexport async function getLastTradesData(metadata) {\r\n    const ethPrice = await getEthPrice();\r\n\r\n    let datas = [];\r\n    try {\r\n        const trades = await getLastTrades(metadata);\r\n        for (const trade of trades) {\r\n            let tokenID = trade.sell.data.id;\r\n            let owner = await getAssetInfo(tokenID)\r\n            let price = (trade.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            datas = datas.concat({ tokenID: tokenID, owner: owner, price: price, uptime: (Date.parse(trade.updated_timestamp) - Date.parse(trade.timestamp)) / 1000 })\r\n        }\r\n\r\n        return datas;\r\n    } catch (err) { console.log(err) }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getAvgDailyPrice(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date date à partir de laquelle on récupère les données (30j max)\r\n * @returns liste contenant les infos liées à chaque ordre de vente rempli.\r\n */\r\nexport async function getAllOrdersHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            price = (+toEthPrice(order.buy.data.quantity))\r\n            price.toFixed(6)\r\n            let dict = {\r\n                time: f_time,\r\n                data: {\r\n                    price: price,\r\n                    volume: 0\r\n                },\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        });\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns liste contenant les infos de chaque carte actuellement en promotion\r\n */\r\nexport const getDiscounts = async () => {\r\n    let url = 'https://gumarkets.freeboxos.fr:5000/discounts'\r\n    const response = await Axios(url)\r\n    const result = response.data\r\n    return result;\r\n\r\n}\r\n\r\n\r\ngetCheapestUSDSellOrders();","import { useState, useEffect } from 'react'\r\nimport Item from './Item'\r\nimport '../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Collection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [protos, setProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getAllProtos();\r\n        setAllProtos(myProtos)\r\n        setProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(protos)\r\n    }, [protos])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allProtos.filter((proto) => {\r\n            let metadata = JSON.parse(proto.metadata)\r\n            return metadata.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n        })\r\n\r\n        setProtos(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {protos.map((proto) => (\r\n\r\n                            <Item key={`${proto.token_proto}`} proto={proto}></Item>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Collection","//ImmutableXConnection.js\r\n//Sample Immutable X functions for collection interaction\r\n\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst linkAddress = 'https://link.x.immutable.com';\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n// Ropsten Testnet\r\n//const linkAddress = 'https://link.uat.x.immutable.com';\r\n//const apiAddress = 'https://api.uat.x.immutable.com/v1';\r\n\r\n//The token address for the collection to be monitored. Currently set to Gods Unchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\nconst link = new Link(linkAddress);\r\n\r\n\r\nconst WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nconst STARK_PUBLIC_KEY = 'STARK_PUBLIC_KEY';\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// User Account Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n//Creates or logs a user into their Immutable X account via web3 wallet\r\nexport async function setupAndLogin() {\r\n    const { address, starkPublicKey } = await link.setup({});\r\n    localStorage.setItem(WALLET_ADDRESS, address);\r\n    localStorage.setItem(STARK_PUBLIC_KEY, starkPublicKey);\r\n}\r\n\r\n//Remove the local storage wallet address\r\nexport function logout() {\r\n    localStorage.removeItem('WALLET_ADDRESS');\r\n}\r\n\r\n//Get the user balances\r\nexport async function getUserBalances() {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    return await client.getBalances({ user: address });\r\n}\r\n\r\n//Deposits ETH into Immutable X\r\nexport async function depositEth(amountInEth) {\r\n    await link.deposit({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Starts the withdrawal process from Immutable X\r\nexport async function prepareWithdrawal(amountInEth) {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Finishes the withdrawal process from Immutable X\r\n//Must wait for user balance to have ETH in the withdrawable state \r\nexport async function completeWithdrawal() {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH\r\n    });\r\n}\r\n\r\n//Show user history\r\nexport async function showUserHistory() {\r\n    link.history({});\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////// Asset Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the user's assets\r\n * @param {string} assetCursor - optional cursor parameter \r\n * @returns Object containing the assets and a cursor if more assets remain to be retrieved\r\n */\r\nexport async function getUserAssets(assetCursor) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    const assetsRequest = await client.getAssets({ user: address, cursor: assetCursor, status: 'imx', collection: COLLECTION_ADDRESS });\r\n    return { assets: assetsRequest.result, cursor: assetsRequest.cursor };\r\n}\r\n\r\n\r\nexport async function getAllUserAssets() {\r\n    let assetCursor;\r\n    let assets = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let assetRequest = await client.getAssets({ user: address, status: 'imx', collection: COLLECTION_ADDRESS, sell_orders: true });\r\n            assets = assets.concat(assetRequest.result);\r\n            assetCursor = assetRequest.cursor;\r\n\r\n        } while (assetCursor);\r\n\r\n        for (let asset of assets) {\r\n            asset.isListed = false;\r\n            if (asset.orders?.sell_orders?.length > 0) {\r\n                asset.isListed = true;\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return assets;\r\n    }\r\n\r\n}\r\n\r\n//Opens the Link SDK popup to sell an asset as the specified price\r\nexport async function sellAsset(asset, priceInEth) {\r\n    let sellParams = { amount: priceInEth, tokenId: asset.id, tokenAddress: asset.token_address };\r\n    //Throws an error if not successful\r\n    await link.sell(sellParams);\r\n}\r\n\r\n//Transfers an asset to another address\r\nexport async function transferERC721(asset, addressToSendTo) {\r\n    await link.transfer({\r\n        type: ERC721TokenType.ERC721,\r\n        tokenId: asset.id,\r\n        tokenAddress: asset.token_address,\r\n        to: addressToSendTo\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n///////////////////////// Marketplace Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the cheapest active orders for the collection\r\n * @param {*} ordersCursor - optional cursor parameter \r\n * @param {*} tokenName - optional token name to filter on \r\n * @param {*} metadata - optional JSON string metadata to filter on \r\n * @returns Object containing the cheapest orders and a cursor if more orders remain\r\n */\r\nexport async function getCheapestSellOrders(pageSize, ordersCursor, metadata) {\r\n    try {\r\n        const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n        const ordersRequest = await client.getOrders({\r\n            page_size: pageSize,\r\n            cursor: ordersCursor,\r\n            status: 'active',\r\n            sell_token_address: COLLECTION_ADDRESS,\r\n            sell_metadata: metadata,\r\n            order_by: 'buy_quantity',\r\n            direction: 'asc'\r\n        });\r\n        return { orders: ordersRequest.result, cursor: ordersRequest.cursor };\r\n    } catch (err) {\r\n        console.log(err)\r\n\r\n    }\r\n}\r\n\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        console.log(orders)\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getPriceHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n//Opens the Link SDK popup to complete an order\r\nexport async function fillOrder(order) {\r\n    await link.buy({ orderId: order });\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////","import Axios from \"axios\"\r\n\r\nexport const fetchProtoCollection = async () => {\r\n    let url = 'https://api.godsunchained.com/v0/proto?perPage=2000'\r\n    const response = await Axios(url)\r\n    const assets = response.data.records\r\n    return assets;\r\n\r\n}\r\n\r\n\r\n\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\nexport const fetchBestPrice = async (popupCard, quality) => {\r\n    var result = null\r\n    var bestOrder = {\r\n        minPrice: Number.MAX_SAFE_INTEGER,\r\n        orderID: null\r\n    };\r\n    let url = 'https://api.x.immutable.com/v1/orders'\r\n    const json = JSON.stringify(\r\n        {\r\n            \"proto\": [`${popupCard.id}`],\r\n            \"quality\": [`${quality}`]\r\n        }\r\n    );\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    sell_metadata: json,\r\n                    status: 'active',\r\n                    order_by: 'buy_quantity',\r\n                    direction: 'asc',\r\n\r\n                }\r\n            })\r\n        result = response.data.result\r\n        result.map((order) => {\r\n\r\n            let quantity = order.buy.data.quantity\r\n            let decimals = order.buy.data.decimals\r\n            let currentPrice = (quantity * Math.pow(10, -decimals)).toFixed(6)\r\n            let currentID = order.order_id\r\n            if (bestOrder.minPrice > currentPrice) {\r\n                bestOrder.minPrice = currentPrice;\r\n                bestOrder.orderID = currentID;\r\n            }\r\n        })\r\n\r\n        var image_url = result[0].sell.data.properties.image_url;\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return {\r\n            result,\r\n            bestOrder,\r\n            image_url\r\n        };\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n","import {\r\n    ComposedChart,\r\n    Line,\r\n    Area,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    Scatter,\r\n    ResponsiveContainer,\r\n    Label,\r\n} from 'recharts';\r\nimport { getEthPrice } from '../utils/getProtoCollection.js';\r\nimport { getPriceHistory } from '../utils/ImmutableXConnection.js'\r\nimport { getAllOrdersHistory, getAvgDailyPrice } from '../utils/apiCalls.js';\r\nimport { useState, useEffect } from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { SpinnerWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Chart({ proto, quality, type }) {\r\n    const [history, setHistory] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const Init = async (proto, quality, min_date, type) => {\r\n        setLoading(true)\r\n        console.log(min_date)\r\n        //get price history\r\n        const json = JSON.stringify(\r\n            {\r\n                \"proto\": [`${proto}`],\r\n                \"quality\": [`${quality}`]\r\n            }\r\n        );\r\n        const ethprice = await getEthPrice()\r\n\r\n        if (type === \"month-avg\") {\r\n            const hprices = await getAvgDailyPrice(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"month-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"week-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let min_date;\r\n        switch (type) {\r\n            case (\"month-avg\" || \"month-detailed\"):\r\n                min_date = new Date()\r\n                min_date.setMonth(min_date.getMonth() - 1)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            case \"week-detailed\":\r\n                min_date = new Date()\r\n                min_date.setTime(min_date.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            default:\r\n                min_date = undefined;\r\n        }\r\n        console.log(type)\r\n        console.log(min_date)\r\n        Init(proto, quality, min_date, type)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <SpinnerWrapper>\r\n                    <Spinner animation=\"grow\" /> </SpinnerWrapper>\r\n                :\r\n                <div className=\"d-flex align-items-center\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={400}\r\n                        data={history}\r\n                        margin={{\r\n                            top: 20,\r\n                            right: 20,\r\n                            bottom: 20,\r\n                            left: 20,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#f5f5f5\" />\r\n                        <XAxis dataKey=\"time\" />\r\n                        <YAxis yAxisId=\"left\" dataKey=\"data.price\">\r\n                            <Label angle={270} position='left' style={{ textAnchor: 'middle' }}>\r\n                                USD price\r\n                            </Label>\r\n                        </YAxis>\r\n                        <YAxis yAxisId=\"right\" dataKey=\"data.volume\" orientation=\"right\" domain={[0, dataMax => (dataMax * 5)]}>\r\n                            <Label angle={90} position='right' style={{ textAnchor: 'middle' }}>\r\n                                Volume\r\n                            </Label>\r\n                        </YAxis>\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"data.price\" stroke=\"#8884d8\" />\r\n                        <Bar yAxisId=\"right\" dataKey=\"data.volume\" barSize={5} fill=\"#413ea0\" />\r\n\r\n                    </ComposedChart>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { sellAsset, fillOrder, getOrdersHistory, getCheapestSellOrders, getPriceHistory, toEthPrice } from '../utils/ImmutableXConnection.js'\r\nimport { fetchBestPrice, getEthPrice } from '../utils/getProtoCollection'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nfunction Popup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [orderID, setOrderID] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [quality, setQuality] = useState(\"Meteorite\")\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [ethPrice, setEthPrice] = useState(null);\r\n    const [orders, setOrders] = useState([])\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n  display:flex;\r\n  flex-direction:row;\r\n  justify-content : center;\r\n  align-items:center;\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const { result, bestOrder, image_url } = await fetchBestPrice(popupCard, quality);\r\n            console.log(result, bestOrder, image_url)\r\n            setOrders(result.slice(0, 5))\r\n            setPrice(bestOrder.minPrice)\r\n            setOrderID(bestOrder.orderID)\r\n            const aPrice = await getEthPrice();\r\n            setEthPrice(aPrice);\r\n            setImage(image_url)\r\n            if (bestOrder.orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [quality])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleMeteorite = () => {\r\n        setQuality(\"Meteorite\")\r\n\r\n    }\r\n    const handleShadow = () => {\r\n        setQuality(\"Shadow\")\r\n\r\n    }\r\n    const handleGold = () => {\r\n        setQuality(\"Gold\")\r\n\r\n    }\r\n\r\n    const handleDiamond = () => {\r\n        setQuality(\"Diamond\")\r\n    }\r\n\r\n    const handleSell = () => {\r\n        sellAsset('0x843279e9ee4e64ff7a4d8743df80e5a914ff8053ee40a15b6d7b6a5b195e8375', '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c', 0.01)\r\n    }\r\n\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        error ? <h5>this card is not available for trade</h5> :\r\n                            <div>\r\n                                <p>Quality : {quality}</p>\r\n                                <p>Price : {price} ETH - {(price * ethPrice).toFixed(2)} USD</p>\r\n                                <Pcontainer>\r\n                                    <img src={image} alt={popupCard.id}></img>\r\n                                    <Chart proto={popupCard.id} quality={quality} />\r\n                                </Pcontainer>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <p>For sale:\r\n                                        {orders.map((order) => {\r\n                                            const order_ethprice = toEthPrice(order.buy.data.quantity)\r\n                                            const order_usdprice = (order_ethprice * ethPrice).toFixed(2)\r\n                                            return (\r\n                                                <p><BuyButton value={order.order_id} onClick={handleBuy}>{order_usdprice} USD </BuyButton> : {order_ethprice} ETH</p>\r\n                                            )\r\n                                        }\r\n                                        )}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                    }\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleMeteorite}>\r\n                        Meteorite\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleShadow}>\r\n                        Shadow\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={handleGold}>\r\n                        Gold\r\n                    </Button>\r\n                    <Button variant=\"link\" onClick={handleDiamond}>\r\n                        Diamond\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Popup","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\n\r\nfunction Home() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} loadCollection={fetchProtoCollection} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { useState, createContext } from 'react'\r\n\r\nexport const LoggedContext = createContext()\r\n\r\nexport const LoggedProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(localStorage.getItem('WALLET_ADDRESS') !== null)\r\n\r\n    return (\r\n        <LoggedContext.Provider value={{ logged, setLogged }}>\r\n            {children}\r\n        </LoggedContext.Provider>\r\n    )\r\n}","\r\nimport { ImageWrapper } from '../styles/GlobalStyle'\r\n\r\n\r\nfunction OwnedCard({ card, showPopup, setPopup, popupCard, setPopupCard }) {\r\n\r\n\r\n\r\n    const handleClick = () => {\r\n        setPopup(!showPopup)\r\n        setPopupCard(card)\r\n    }\r\n\r\n    return (\r\n        <div className=\"lol\">\r\n            <li key={card.id}>\r\n                <ImageWrapper>\r\n                    <img className='nft-item-cover' src={card.image_url} alt={`${card.id} cover`} onClick={handleClick} />\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OwnedCard","import { useState, useEffect } from 'react'\r\nimport OwnedCard from './OwnedCard'\r\nimport styled from 'styled-components'\r\nimport '../styles/Collection.css'\r\nimport { getAllUserAssets } from '../utils/ImmutableXConnection'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nfunction OwnedCollection({ showPopup, setPopup, popupCard, setPopupCard }) {\r\n\r\n\r\n\r\n    const CardWrapper = styled.div`\r\n    \r\n  `\r\n\r\n    const [allCards, setAllCards] = useState([])\r\n    const [cards, setCards] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        try {\r\n            const assets = await getAllUserAssets();\r\n            setCards(assets)\r\n            setAllCards(assets)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(cards)\r\n    }, [cards])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allCards.filter((card) => card.name.toLowerCase().includes(e.target.value.toLowerCase()))\r\n        setCards(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" onChange={handleInput} placeholder=\"Search a card\" />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {cards.map((card) => (\r\n                            <CardWrapper>\r\n                                <OwnedCard key={card.id} card={card} showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n                            </CardWrapper>\r\n                        )\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default OwnedCollection","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { toEthPrice } from '../utils/getProtoCollection'\r\nimport { sellAsset, fillOrder, getCheapestSellOrders } from '../utils/ImmutableXConnection.js'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\nfunction OwnedPopup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [sellPrice, setSellPrice] = useState(null)\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    async function fetchCheapestSellOrders() {\r\n        setLoading(true)\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${popupCard.metadata.proto}`],\r\n                    \"quality\": [`${popupCard.metadata.quality}`]\r\n                }\r\n            );\r\n            const myOrders = await getCheapestSellOrders(5, '', json)\r\n            setOrders(myOrders.orders)\r\n            console.log(myOrders)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCheapestSellOrders();\r\n    }, [])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleSell = async () => {\r\n        console.log(\"SELL ORDER\", sellPrice)\r\n        console.log(\"asset ID\", popupCard.id);\r\n        console.log(\"tokenAddress\", popupCard.token_address)\r\n        try {\r\n            await sellAsset(popupCard, sellPrice);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setSellPrice(e.target.value)\r\n    }\r\n\r\n    const handleBuy = (e) => {\r\n        console.log(e.target.value)\r\n        fillOrder(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.metadata.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        <div>\r\n                            <p>Quality : {popupCard.metadata.quality}</p>\r\n                            <Pcontainer>\r\n                                <img src={popupCard.image_url} alt={popupCard.id}></img>\r\n                                <Chart proto={popupCard.metadata.proto} quality={popupCard.metadata.quality} />\r\n                            </Pcontainer>\r\n                            <p>For sale:\r\n                                {orders.map((order) => (\r\n                                    <p><BuyButton value={order.order_id} onClick={handleBuy}>BUY</BuyButton> : {toEthPrice(order.buy.data.quantity)} </p>\r\n                                )\r\n                                )}</p>\r\n                        </div>\r\n                    }\r\n                </Modal.Body >\r\n                <Modal.Footer>\r\n                    <div className=\"container d-flex content-center\">\r\n                        <input type=\"text\" name=\"ethprice\" placeHolder=\"eth Price\" onChange={handleChange} />\r\n                        <SellButton onClick={handleSell}>Sell yours</SellButton>\r\n                    </div>\r\n                </Modal.Footer>\r\n            </Modal >\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OwnedPopup","import { setupAndLogin } from '../utils/ImmutableXConnection'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useEffect, useState, useContext } from 'react'\r\n\r\nimport OwnedCollection from '../components/OwnedCollection'\r\nimport OwnedPopup from '../components/OwnedPopup'\r\n\r\nfunction Account() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [address, setAddress] = useState('')\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n\r\n\r\n    async function logAccount() {\r\n        if (!logged) {\r\n            try {\r\n                await setupAndLogin()\r\n                setLogged(true)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n                setLogged(false)\r\n            }\r\n        }\r\n        setAddress(localStorage.getItem('WALLET_ADDRESS'))\r\n    }\r\n\r\n    useEffect(() => {\r\n        logAccount();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <OwnedCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} user={address} />\r\n            {showPopup ?\r\n                <OwnedPopup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account","export default __webpack_public_path__ + \"static/media/logo.aac3612d.png\";","import '../styles/Header.css'\r\nimport styled from 'styled-components'\r\nimport Logo from '../assets/logo.png'\r\nimport { Link } from 'react-router-dom'\r\nimport { setupAndLogin, logout } from '../utils/ImmutableXConnection'\r\nimport { useContext } from 'react'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DefaultButton } from '../styles/GlobalStyle'\r\nimport { useState } from 'react'\r\n\r\nfunction Header() {\r\n\r\n    const NavContainer = styled.nav`\r\n  padding: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n    const StyledLink = styled(Link)`\r\n  padding: 10px 15px;\r\n  color: #c4fffc;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  text-align: center;\r\n`\r\n\r\n\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [search, setSearch] = useState('')\r\n    const history = useHistory();\r\n\r\n    async function handleConnect() {\r\n        if (logged) {\r\n            alert(\"user already connected\")\r\n        }\r\n        else {\r\n            async function logAccount() {\r\n                try {\r\n                    await setupAndLogin()\r\n                    setLogged(true)\r\n                }\r\n                catch (err) {\r\n                    console.log(err)\r\n                    setLogged(false)\r\n                }\r\n            }\r\n            logAccount();\r\n        }\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        if (logged) {\r\n            logout();\r\n            setLogged(false)\r\n            let path = `/browse`;\r\n            history.push(path);\r\n            alert(\"user disconnecterd\")\r\n        }\r\n        else {\r\n            alert(\"user not logged in\")\r\n        }\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex headerWrapper\">\r\n            <div className=\"d-flex\">\r\n                <img src={Logo} className=\"mainLogo\" alt=\"mainLogo\" />\r\n            </div>\r\n            <div className=\"d-flex\">\r\n\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <input type=\"text\" placeholder=\"Enter eth address\" onChange={handleInput} />\r\n                    <StyledLink className=\"link\" to={`/godsunchained/user/${search}`} >Search user</StyledLink>\r\n                </div>\r\n\r\n            </div>\r\n            <NavContainer>\r\n                {logged ? <DefaultButton onClick={handleDisconnect}>Disconnect</DefaultButton> : (<DefaultButton onClick={handleConnect}>Connect</DefaultButton>)}\r\n                <StyledLink className=\"link\" to=\"/godsunchained/browse\" >Browse Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/account\">Your Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/discounts\">Discounts</StyledLink>\r\n            </NavContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { ImageWrapper } from '../../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction DiscountItem({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                        <span>-{proto.diff}%</span>\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscountItem","import { useState, useEffect } from 'react'\r\nimport DiscountItem from './DiscountItem'\r\nimport '../../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getDiscounts } from '../../utils/apiCalls'\r\n\r\nfunction DiscountsCollection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [protos, setProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getDiscounts();\r\n        setAllProtos(myProtos)\r\n        setProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(protos)\r\n    }, [protos])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allProtos.filter((proto) => {\r\n            let metadata = JSON.parse(proto.metadata)\r\n            return metadata.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n        })\r\n\r\n        setProtos(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {Object.keys(protos).map((key) => (\r\n\r\n                            <DiscountItem key={`${protos[key].token_proto}`} proto={protos[key]}></DiscountItem>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default DiscountsCollection","import { useState, useEffect } from 'react'\r\nimport DiscountsCollection from \"../components/Discounts/DiscountsCollection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchDiscounts } from '../utils/getProtoCollection'\r\n\r\nfunction Discounts() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <DiscountsCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Discounts","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Browse() {\r\n\r\n    //Dans la page Browse, on affiche la totalité des ordres (uniques) en \r\n\r\n    const [protos, setProtos] = useState([])\r\n\r\n    const getProtos = (async () => {\r\n        try {\r\n            var myProtos = await getAllProtos();\r\n            setProtos(myProtos)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProtos();\r\n        console.log(protos)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Browse","\r\nimport { useState, useEffect } from 'react'\r\nimport { getLastTradesData, getOrdersHistory, getLastTrades } from '../utils/apiCalls'\r\n\r\nfunction NewOwners({ proto, quality }) {\r\n\r\n    const [trades, setTrades] = useState([])\r\n\r\n    async function init() {\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${quality}`]\r\n                }\r\n            );\r\n            const tradesData = await getLastTradesData(json);\r\n            setTrades(tradesData.slice(0, 5))\r\n        } catch (err) { console.log(err) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n        console.log(trades)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {trades.map((trade) => (\r\n                    <li>owner : {trade.owner}, price:{trade.price}, NFT_id : {trade.tokenID}, temps en seconde : {trade.uptime}</li>\r\n                ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewOwners;","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\n\r\n\r\nfunction GeneralTab({ proto, quality, id, orders, price, getQuality }) {\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Pcontainer>\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-avg\"} />\r\n\r\n            </Pcontainer>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <p>For sale:\r\n                    {orders.map((order) => {\r\n                        return (\r\n                            <p><BuyButton value={order.order_id} onClick={handleBuy}>{price} USD </BuyButton></p>\r\n                        )\r\n                    }\r\n                    )}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralTab","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\nimport NewOwners from \"../NewOwners\";\r\n\r\n\r\nfunction DetailedTab({ proto, quality, id, orders, price, getQuality }) {\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    return (\r\n        <>\r\n            <div className=\"last trades\">\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n\r\n                Last trades :\r\n                <NewOwners proto={proto} quality={getQuality(quality)} />\r\n\r\n            </div>\r\n\r\n            <Pcontainer>\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-detailed\"} />\r\n\r\n            </Pcontainer>\r\n            <Pcontainer>\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"week-detailed\"} />\r\n\r\n            </Pcontainer>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailedTab","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getCheapestUSDSellOrders } from '../utils/apiCalls'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport styled from \"styled-components\";\r\nimport Chart from '../components/Chart'\r\nimport { BuyButton } from '../styles/GlobalStyle'\r\nimport { fillOrder } from '../utils/ImmutableXConnection'\r\nimport '../styles/details.css'\r\nimport NewOwners from \"../components/NewOwners\";\r\nimport GeneralTab from '../components/Details/GeneralTab'\r\nimport DetailedTab from '../components/Details/DetailedTab'\r\n\r\n\r\n\r\n\r\nfunction Details() {\r\n\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    var qualities = {\r\n        4: \"Meteorite\",\r\n        3: \"Shadow\",\r\n        2: \"Gold\",\r\n        1: \"Diamond\"\r\n    };\r\n\r\n    const getQuality = (key) => { return qualities[key] }\r\n\r\n    const { id } = useParams();\r\n    const [proto, quality] = id.split('-')\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const [toggleState, setToggleState] = useState(1);\r\n    const toggleTab = (index) => {\r\n        setToggleState(index);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${getQuality(quality)}`]\r\n                }\r\n            );\r\n            let { orders } = await getCheapestUSDSellOrders(json)\r\n            setOrders(orders)\r\n            setPrice(orders[0].buy.data.quantity)\r\n            if (orders[0].orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ?\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <Spinner animation=\"grow\" /> </div>\r\n                :\r\n                error ? <h5>this card is not available for trade</h5> :\r\n\r\n                    <div>\r\n                        <div className=\"bloc-tabs\">\r\n                            <button\r\n                                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(1)}\r\n                            >\r\n                                General info\r\n                            </button>\r\n                            <button\r\n                                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(2)}\r\n                            >\r\n                                Detailed Info\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"content-tabs\">\r\n                            <div\r\n                                className={toggleState === 1 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <GeneralTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                            <div\r\n                                className={toggleState === 2 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <DetailedTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Details","import { useState, useEffect } from 'react'\r\nimport axios from \"axios\";\r\n\r\nconst useGetNFTs = (address) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n\r\n        const getAllAssets = async (c) => {\r\n            let cursor;\r\n            let data = [];\r\n\r\n            do {\r\n                let config = {\r\n                    params: {\r\n                        'cursor': cursor,\r\n                        'user': address,\r\n                        'order_by': 'updated_at',\r\n                        'direction': 'desc',\r\n                    },\r\n                }\r\n                const url = 'https://api.x.immutable.com/v1/assets'\r\n                const response = await axios.get(url, config)\r\n                const result = response.data\r\n                const resData = result.result;\r\n                cursor = result.cursor;\r\n                data = data.concat(resData)\r\n            } while (cursor)\r\n            setData(data);\r\n        };\r\n\r\n        getAllAssets();\r\n    }, []);\r\n\r\n    return { data: data }\r\n}\r\n\r\nexport default useGetNFTs","import { useState, useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport { getEthPrice } from '../../utils/apiCalls'\r\nimport { getCheapestUSDSellOrders } from '../../utils/apiCalls';\r\n\r\nconst useCard = (data) => {\r\n\r\n    const [buyPrice, setBuyPrice] = useState([]);\r\n    const [proto, setProto] = useState(null)\r\n    const [actualPrice, setActualPrice] = useState(undefined)\r\n\r\n    var qualities = {\r\n        4: \"Meteorite\",\r\n        3: \"Shadow\",\r\n        2: \"Gold\",\r\n        1: \"Diamond\"\r\n    };\r\n\r\n    const getQuality = (key) => { return qualities[key] }\r\n\r\n    useEffect(() => {\r\n\r\n        const getBuyPrice = async () => {\r\n\r\n            try {\r\n                const ethPrice = await getEthPrice();\r\n                let config = {\r\n                    params: {\r\n                        'page_size': 20,\r\n                        'buy_token_address': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n                        'buy_token_id': data.id,\r\n                        'order_by': 'timestamp',\r\n                        'direction': 'desc'\r\n                    },\r\n                }\r\n                const url = 'https://api.x.immutable.com/v1/orders'\r\n                const response = await axios.get(url, config)\r\n                const result = response.data.result[0].amount_sold\r\n                const proto = response.data.result[0].buy.data.properties.image_url.split(\"id=\")[1].split(\"&q=\").join(\"-\")\r\n                setProto(proto)\r\n                const price = (result * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n                setBuyPrice(price);\r\n                //getActualPrice();\r\n\r\n            } catch (err) {\r\n                setBuyPrice(undefined)\r\n                console.log(err)\r\n            }\r\n        };\r\n\r\n        // const getActualPrice = async () => {\r\n        //     try {\r\n        //         //get best price for this card\r\n        //         const json = JSON.stringify(\r\n        //             {\r\n        //                 \"proto\": [`${proto.split('-')[0]}`],\r\n        //                 \"quality\": [`${getQuality(proto.split('-')[1])}`]\r\n        //             }\r\n        //         );\r\n        //         let { orders } = await getCheapestUSDSellOrders(json)\r\n        //         console.log(orders[0].buy.data.quantity)\r\n        //         setActualPrice(orders[0].buy.data.quantity)\r\n\r\n        //     } catch (err) {\r\n        //         console.log(err)\r\n        //     }\r\n        // }\r\n\r\n        getBuyPrice();\r\n    }, []);\r\n\r\n    return { buyPrice: buyPrice, proto: { token_proto: proto }, /*actualPrice: actualPrice*/ }\r\n}\r\n\r\nexport default useCard","import useCard from \"./useCard\";\r\nimport Item from \"../Item\";\r\n\r\nfunction Card({ data }) {\r\n    const { buyPrice, proto, actualPrice } = useCard(data);\r\n\r\n    return (\r\n        <div>\r\n            {proto.token_proto !== null && (\r\n                <div>\r\n                    <Item key={`${proto.token_proto}`} proto={proto} />\r\n                    <span>buying price : {buyPrice} </span>\r\n                    <span> actual price : {actualPrice}</span>\r\n                    <span> diff : {(actualPrice - buyPrice).toFixed(2)}</span>\r\n                </div>)\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","import { useState, useEffect } from 'react'\r\nimport useGetNFTs from './useGetNFTs'\r\nimport Card from './Card'\r\nimport '../../styles/Collection.css'\r\n\r\n\r\nfunction CardsList({ address }) {\r\n\r\n    const { data: allCards } = useGetNFTs(address);\r\n    const [cards, setCards] = useState(allCards)\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ul className=\"list-unstyled\">\r\n                <div className=\"row\">\r\n                    {allCards.map((data) => (\r\n                        <Card data={data} />\r\n                    )\r\n                    )}\r\n                </div>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsList","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport CardsList from \"../components/Users/CardsList\";\r\n\r\nfunction User() {\r\n\r\n    const { id: address } = useParams();\r\n    return (\r\n        <div className=\"container\">\r\n            <CardsList address={address} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport LinkWrapper from './components/LinkWrapper';\r\nimport Home from './pages/Home'\r\nimport Account from './pages/Account'\r\nimport Header from './components/Header'\r\nimport Discounts from './pages/Discounts'\r\nimport Browse from './pages/Browse'\r\nimport Details from './pages/Details'\r\nimport User from './pages/User'\r\n\r\nimport { LoggedProvider } from './utils/context'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<LoggedProvider>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Route exact path=\"/godsunchained\">\r\n\t\t\t\t\t<Redirect to=\"/godsunchained/browse\" />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/browse\">\r\n\t\t\t\t\t<Browse />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/account\">\r\n\t\t\t\t\t<Account />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/discounts\">\r\n\t\t\t\t\t<Discounts />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/protos/:id\">\r\n\t\t\t\t\t<Details />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/user/:id\">\r\n\t\t\t\t\t<User />\r\n\t\t\t\t</Route>\r\n\t\t\t</LoggedProvider>\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n"],"sourceRoot":""}