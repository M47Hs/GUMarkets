{"version":3,"sources":["utils/ImmutableXConnection.js","components/Popup.js","components/Item.js","components/Collection.js","components/Home.js","assets/logo.png","utils/context.js","components/Header.js","components/App.js","pages/Account.js","index.js"],"names":["apiAddress","COLLECTION_ADDRESS","link","Link","WALLET_ADDRESS","STARK_PUBLIC_KEY","setupAndLogin","a","setup","address","starkPublicKey","localStorage","setItem","getAllUserAssets","assets","ImmutableXClient","build","publicApiUrl","client","getItem","getAssets","user","status","collection","sell_orders","then","assetRequest","concat","result","assetCursor","cursor","console","log","asset","isListed","orders","length","fillOrder","order","buy","orderId","Popup","showPopup","setPopup","popupCard","useState","price","setPrice","orderID","setOrderID","image","setImage","quality","setQuality","setError","isLoading","setLoading","bestOrder","minPrice","Number","MAX_SAFE_INTEGER","fetchPrice","json","JSON","stringify","id","Axios","get","params","sell_metadata","order_by","direction","response","data","map","quantity","decimals","currentPrice","Math","pow","toFixed","currentID","order_id","image_url","sell","properties","toString","useEffect","Modal","show","onHide","Header","closeButton","Title","name","Body","className","Spinner","animation","src","alt","onClick","Footer","Button","variant","Item","card","setPopupCard","Collection","allCards","setAllCards","cards","setCards","fetchAPIdata","records","type","onChange","e","filteredResult","filter","toLowerCase","includes","target","value","Home","LoggedContext","createContext","LoggedProvider","children","logged","setLogged","Provider","useContext","history","useHistory","alert","logAccount","Logo","removeItem","push","to","App","funds","setFunds","deposit","ETHTokenType","ETH","amount","getBalances","balances","getOrders","getOrder","imx","toNumber","register","getUserInfo","Account","setAddress","fetchAssets","res","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.e30a5697.chunk.js","sourcesContent":["//ImmutableXConnection.js\r\n//Sample Immutable X functions for collection interaction\r\n\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst linkAddress = 'https://link.x.immutable.com';\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n// Ropsten Testnet\r\n//const linkAddress = 'https://link.uat.x.immutable.com';\r\n//const apiAddress = 'https://api.uat.x.immutable.com/v1';\r\n\r\n//The token address for the collection to be monitored. Currently set to Gods Unchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\nconst link = new Link(linkAddress);\r\n\r\n\r\nconst WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nconst STARK_PUBLIC_KEY = 'STARK_PUBLIC_KEY';\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// User Account Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n//Creates or logs a user into their Immutable X account via web3 wallet\r\nexport async function setupAndLogin() {\r\n    const { address, starkPublicKey } = await link.setup({});\r\n    localStorage.setItem(WALLET_ADDRESS, address);\r\n    localStorage.setItem(STARK_PUBLIC_KEY, starkPublicKey);\r\n}\r\n\r\n//Remove the local storage wallet address\r\nexport function logout() {\r\n    localStorage.removeItem('WALLET_ADDRESS');\r\n}\r\n\r\n//Get the user balances\r\nexport async function getUserBalances() {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    return await client.getBalances({ user: address });\r\n}\r\n\r\n//Deposits ETH into Immutable X\r\nexport async function depositEth(amountInEth) {\r\n    await link.deposit({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Starts the withdrawal process from Immutable X\r\nexport async function prepareWithdrawal(amountInEth) {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Finishes the withdrawal process from Immutable X\r\n//Must wait for user balance to have ETH in the withdrawable state \r\nexport async function completeWithdrawal() {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH\r\n    });\r\n}\r\n\r\n//Show user history\r\nexport async function showUserHistory() {\r\n    link.history({});\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////// Asset Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the user's assets\r\n * @param {string} assetCursor - optional cursor parameter \r\n * @returns Object containing the assets and a cursor if more assets remain to be retrieved\r\n */\r\nexport async function getUserAssets(assetCursor) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    const assetsRequest = await client.getAssets({ user: address, cursor: assetCursor, status: 'imx', collection: COLLECTION_ADDRESS });\r\n    return { assets: assetsRequest.result, cursor: assetsRequest.cursor };\r\n}\r\n\r\n\r\nexport async function getAllUserAssets() {\r\n    let assetCursor;\r\n    let assets = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    do {\r\n        let assetRequest = await client.getAssets({ user: address, status: 'imx', collection: COLLECTION_ADDRESS, sell_orders: true }).then(assets => { return assets });\r\n\r\n        assets = assets.concat(assetRequest.result);\r\n        assetCursor = assetRequest.cursor;\r\n\r\n    } while (assetCursor);\r\n    console.log(assets)\r\n\r\n    for (let asset of assets) {\r\n        asset.isListed = false;\r\n        if (asset.orders?.sell_orders?.length > 0) {\r\n            asset.isListed = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//Opens the Link SDK popup to sell an asset as the specified price\r\nexport async function sellAsset(tokenId, tokenAddress, priceInEth) {\r\n    let sellParams = { amount: priceInEth, tokenId: tokenId, tokenAddress: tokenAddress };\r\n    //Throws an error if not successful\r\n    await link.sell(sellParams);\r\n}\r\n\r\n//Transfers an asset to another address\r\nexport async function transferERC721(asset, addressToSendTo) {\r\n    await link.transfer({\r\n        type: ERC721TokenType.ERC721,\r\n        tokenId: asset.id,\r\n        tokenAddress: asset.token_address,\r\n        to: addressToSendTo\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n///////////////////////// Marketplace Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the cheapest active orders for the collection\r\n * @param {*} ordersCursor - optional cursor parameter \r\n * @param {*} tokenName - optional token name to filter on \r\n * @param {*} metadata - optional JSON string metadata to filter on \r\n * @returns Object containing the cheapest orders and a cursor if more orders remain\r\n */\r\nexport async function getCheapestSellOrders(ordersCursor, tokenName, metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        cursor: ordersCursor,\r\n        status: 'active',\r\n        sell_token_address: COLLECTION_ADDRESS,\r\n        name: tokenName,\r\n        sell_metadata: metadata,\r\n        order_by: 'buy_quantity',\r\n        direction: 'asc'\r\n    });\r\n    return { orders: ordersRequest.result, cursor: ordersRequest.cursor };\r\n}\r\n\r\n//Opens the Link SDK popup to complete an order\r\nexport async function fillOrder(order) {\r\n    await link.buy({ orderId: order });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { sellAsset, fillOrder } from '../utils/ImmutableXConnection.js'\r\n\r\n\r\nfunction Popup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [orderID, setOrderID] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [quality, setQuality] = useState(\"Meteorite\")\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    var bestOrder = {\r\n        minPrice: Number.MAX_SAFE_INTEGER,\r\n        orderID: null\r\n    };\r\n\r\n    const fetchPrice = async () => {\r\n        setLoading(true)\r\n        let url = 'https://api.x.immutable.com/v1/orders'\r\n        const json = JSON.stringify(\r\n            {\r\n                \"proto\": [`${popupCard.id}`],\r\n                \"quality\": [`${quality}`]\r\n            }\r\n        );\r\n        try {\r\n            const response = await Axios.get(url,\r\n                {\r\n                    params:\r\n                    {\r\n                        sell_metadata: json,\r\n                        status: 'active',\r\n                        order_by: 'buy_quantity',\r\n                        direction: 'asc',\r\n\r\n                    }\r\n                })\r\n            const result = response.data.result\r\n            console.log(result)\r\n            result.map((order) => {\r\n\r\n                let quantity = order.buy.data.quantity\r\n                let decimals = order.buy.data.decimals\r\n                let currentPrice = (quantity * Math.pow(10, -decimals)).toFixed(6)\r\n                let currentID = order.order_id\r\n                if (bestOrder.minPrice > currentPrice) {\r\n                    bestOrder.minPrice = currentPrice;\r\n                    bestOrder.orderID = currentID;\r\n                }\r\n            })\r\n\r\n            const image_url = result[0].sell.data.properties.image_url;\r\n\r\n            setPrice(bestOrder.minPrice)\r\n            setOrderID(bestOrder.orderID)\r\n            setImage(image_url)\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(\"erreur\")\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPrice();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchPrice();\r\n    }, [quality])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleMeteorite = () => {\r\n        setQuality(\"Meteorite\")\r\n\r\n    }\r\n    const handleShadow = () => {\r\n        setQuality(\"Shadow\")\r\n        console.log(\"Shadow\")\r\n\r\n    }\r\n    const handleGold = () => {\r\n        setQuality(\"Gold\")\r\n\r\n    }\r\n\r\n    const handleDiamond = () => {\r\n        setQuality(\"Diamond\")\r\n    }\r\n\r\n    const handleSell = () => {\r\n        sellAsset('0x843279e9ee4e64ff7a4d8743df80e5a914ff8053ee40a15b6d7b6a5b195e8375', '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c', 0.01)\r\n    }\r\n\r\n    async function handleBuy() {\r\n        try {\r\n            console.log(orderID.toString());\r\n            await fillOrder(orderID.toString());\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={showPopup} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        <div>\r\n                            <p>Quality : {quality}</p>\r\n                            <p>Price : {price}</p>\r\n                            <p>Order ID : {orderID}</p>\r\n                            <div className=\"container d-flex justify-content-center\">\r\n                                <img src={image} alt={popupCard.id}></img>\r\n                            </div>\r\n                            <button onClick={handleBuy}>BUY</button>\r\n                        </div>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleMeteorite}>\r\n                        Meteorite\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleShadow}>\r\n                        Shadow\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={handleGold}>\r\n                        Gold\r\n                    </Button>\r\n                    <Button variant=\"link\" onClick={handleDiamond}>\r\n                        Diamond\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Popup","import { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport Popup from './Popup'\r\n\r\n\r\nfunction Item({ card, showPopup, setPopup, popupCard, setPopupCard }) {\r\n\r\n\r\n    const handleClick = () => {\r\n        setPopup(!showPopup)\r\n        setPopupCard(card)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <li key={card.id}>\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${card.id}&q=4`} alt={`${card.id} cover`} onClick={handleClick} />\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item","import { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport Item from './Item'\r\nimport '../styles/Collection.css'\r\n\r\nfunction Collection({ showPopup, setPopup, popupCard, setPopupCard }) {\r\n    const [allCards, setAllCards] = useState([])\r\n    const [cards, setCards] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetchAPIdata();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(cards)\r\n    }, [cards])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allCards.filter((card) => card.name.toLowerCase().includes(e.target.value.toLowerCase()))\r\n        setCards(filteredResult)\r\n    }\r\n\r\n    const fetchAPIdata = async () => {\r\n        let url = 'https://api.godsunchained.com/v0/proto?perPage=2000'\r\n        const response = await Axios(url)\r\n        const assets = response.data.records\r\n        console.log(assets)\r\n        setCards(assets)\r\n        setAllCards(assets)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" onChange={handleInput} />\r\n            </div>\r\n            <ul className=\"list-unstyled\">\r\n                <div className=\"row\">\r\n                    {cards.map((card) => (\r\n\r\n                        <Item key={card.id} card={card} showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />)\r\n                    )}\r\n                </div>\r\n            </ul>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Collection","import { useState, useEffect } from 'react'\r\nimport Collection from \"./Collection\"\r\nimport Popup from './Popup'\r\n\r\nfunction Home() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","export default __webpack_public_path__ + \"static/media/logo.aac3612d.png\";","import { useState, createContext } from 'react'\r\n\r\nexport const LoggedContext = createContext()\r\n\r\nexport const LoggedProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(localStorage.getItem('WALLET_ADDRESS') !== null)\r\n\r\n    return (\r\n        <LoggedContext.Provider value={{ logged, setLogged }}>\r\n            {children}\r\n        </LoggedContext.Provider>\r\n    )\r\n}","import '../styles/Header.css'\r\nimport Logo from '../assets/logo.png'\r\nimport Web3 from 'web3';\r\nimport { Link } from 'react-router-dom'\r\nimport { setupAndLogin, logout } from '../utils/ImmutableXConnection'\r\nimport { useState, useContext } from 'react'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const address = localStorage.getItem('WALLET_ADDRESS')\r\n    const history = useHistory();\r\n\r\n    async function handleConnect() {\r\n        if (logged) {\r\n            alert(\"user already connected\")\r\n        }\r\n        else {\r\n            async function logAccount() {\r\n                try {\r\n                    await setupAndLogin()\r\n                    setLogged(true)\r\n                }\r\n                catch (err) {\r\n                    console.log(err)\r\n                    setLogged(false)\r\n                }\r\n            }\r\n            logAccount();\r\n        }\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        if (logged) {\r\n            logout();\r\n            setLogged(false)\r\n            let path = `/`;\r\n            history.push(path);\r\n            alert(\"user disconnecterd\")\r\n        }\r\n        else {\r\n            alert(\"user not logged in\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\" jumbotron d-flex headerWrapper\">\r\n            <img src={Logo} className=\"mainLogo\" alt=\"mainLogo\" />\r\n            <h1 className=\"mainTitle\">GodsUnchained</h1>\r\n            <button onClick={handleConnect}>{logged ? <span>{address}</span> : <span>Connect</span>}</button>\r\n            <button onClick={handleDisconnect}>Disconnect</button>\r\n            <nav>\r\n                <Link to=\"/\" >Home page</Link>\r\n                <Link to=\"/account\">Your account</Link>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import Home from './Home'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './Header'\r\nimport { setupAndLogin, client, getCheapestSellOrders } from '../utils/ImmutableXConnection.js'\r\nimport { useEffect, useState } from 'react'\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ETHTokenType } from '@imtbl/imx-link-types';\r\n\r\nfunction App() {\r\n\r\n\tconst [funds, setFunds] = useState('undefined');\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(localStorage.getItem('address'));\r\n\t}, [])\r\n\r\n\tconst link = new Link('https://link.uat.x.immutable.com');\r\n\r\n\r\n\tasync function register() {\r\n\r\n\t\t// Register user, you can persist address to local storage etc.\r\n\t\tconst { address } = await link.setup({});\r\n\t\tlocalStorage.setItem('address', address);\r\n\r\n\t}\r\n\r\n\tasync function deposit() {\r\n\t\t// Deposit ETH into IMX\r\n\t\tlink.deposit({\r\n\t\t\ttype: ETHTokenType.ETH,\r\n\t\t\tamount: '0.001',\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleConnect = () => {\r\n\t\tregister()\r\n\t}\r\n\r\n\tconst handleClick = () => {\r\n\t\tdeposit()\r\n\t}\r\n\r\n\tconst showFunds = () => {\r\n\t\tgetUserInfo()\r\n\t}\r\n\r\n\tasync function getUserInfo() {\r\n\t\tconst client = await ImmutableXClient.build({ publicApiUrl: 'https://api.uat.x.immutable.com/v1/' });\r\n\t\tconst address = localStorage.getItem('address');\r\n\t\tconsole.log(\"adresse\")\r\n\t\tconsole.log(address)\r\n\r\n\t\tif (address) {\r\n\t\t\tconst balances = await client.getBalances({ user: address });\r\n\t\t\tconst orders = await client.getOrders();\r\n\t\t\tconst order = await client.getOrder({ orderId: 1 });\r\n\t\t\tconst assets = await client.getAssets({\r\n\t\t\t\tuser: address,\r\n\t\t\t});\r\n\t\t\tsetFunds(balances.imx.toNumber() * Math.pow(10, -18))\r\n\t\t}\r\n\r\n\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={handleConnect}>LOG IN </button>\r\n\t\t\t<button onClick={handleClick}>DEPOSIT TO IMX </button>\r\n\t\t\t<button onClick={showFunds}>SHOW FUNDS</button>\r\n\t\t\t<h2>{funds} ETH </h2>\r\n\t\t\t<Home />\r\n\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\nexport default App;\r\n","import { setupAndLogin, getUserAssets, getAllUserAssets, testUser } from '../utils/ImmutableXConnection'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useEffect, useState, useContext } from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport Item from '../components/Item'\r\n\r\nfunction Account() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [address, setAddress] = useState('')\r\n    const [cards, setCards] = useState([])\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n\r\n    async function logAccount() {\r\n        if (!logged) {\r\n            try {\r\n                await setupAndLogin()\r\n                setLogged(true)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n                setLogged(false)\r\n            }\r\n        }\r\n        setAddress(localStorage.getItem('WALLET_ADDRESS'))\r\n        fetchAssets();\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        logAccount();\r\n    }, [])\r\n\r\n\r\n    async function fetchAssets() {\r\n        try {\r\n            const res = await getAllUserAssets();\r\n            setCards(res)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>My user Page</h1>\r\n            <span>My address : {address} </span>\r\n            <span>My collection : </span>\r\n            {logged ?\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {cards.map((card) => (\r\n                            <Item key={card.id} card={card} showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />)\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n                :\r\n                null\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport App from './components/App'\r\nimport Account from './pages/Account'\r\nimport Header from './components/Header'\r\nimport { LoggedProvider } from './utils/context'\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<LoggedProvider>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t<App />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/account\">\r\n\t\t\t\t\t<Account />\r\n\t\t\t\t</Route>\r\n\t\t\t</LoggedProvider>\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n"],"sourceRoot":""}