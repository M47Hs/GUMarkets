{"version":3,"sources":["styles/GlobalStyle.js","components/Item.js","utils/apiCalls.js","components/Collection.js","utils/ImmutableXConnection.js","utils/getProtoCollection.js","components/Chart.js","components/Popup.js","pages/Home.js","utils/context.js","pages/Account.js","assets/logo.png","components/Header.js","components/Discounts/DiscountItem.js","components/Discounts/DiscountsCollection.js","pages/Discounts.js","pages/Browse.js","components/NewOwners.js","components/Details/GeneralTab.js","components/Details/DetailedTab.js","pages/Details.js","components/Users/useGetNFTs.js","components/Users/Card.js","components/Users/useWalletData.js","components/Users/WalletData.js","components/Users/CardsList.js","pages/User.js","index.js"],"names":["ImageWrapper","styled","div","BuyButton","button","DefaultButton","SpinnerWrapper","Item","proto","to","token_proto","className","src","split","alt","onClick","apiAddress","COLLECTION_ADDRESS","toEthPrice","price","Math","pow","toFixed","getEthPrice","a","Axios","get","params","response","result","data","USD","console","log","getAllProtos","ImmutableXClient","build","publicApiUrl","config","headers","protos","getCheapestSellOrders","metadata","client","getOrders","page_size","status","sell_token_address","sell_metadata","order_by","direction","ordersRequest","orders","getCheapestUSDSellOrders","ethPrice","forEach","order","buy","quantity","getOrdersHistory","min_date","localStorage","getItem","cursor","ordersCursors","min_timestamp","concat","sort","b","updated_timestamp","localeCompare","getLastTrades","slice","getAssetInfo","id","url","infos","user","getLastTradesData","datas","trades","trade","tokenID","sell","owner","uptime","Date","parse","timestamp","getAvgDailyPrice","h_prices","map","Map","unixtime","f_time","toLocaleDateString","day","month","has","res","volume","set","value","key","dict","time","getAllOrdersHistory","getDiscounts","Collection","showPopup","setPopup","useState","allProtos","setAllProtos","isLoading","setLoading","searchParam","setSearchParam","myProtos","useEffect","initPage","type","placeholder","onChange","e","target","toLowerCase","Spinner","animation","JSON","name","includes","link","Link","WALLET_ADDRESS","STARK_PUBLIC_KEY","setupAndLogin","setup","address","starkPublicKey","setItem","fillOrder","orderId","fetchBestPrice","popupCard","quality","bestOrder","minPrice","Number","MAX_SAFE_INTEGER","orderID","json","stringify","decimals","currentPrice","currentID","order_id","image_url","properties","Chart","history","setHistory","Init","ethprice","hprices","elem","setMonth","getMonth","toISOString","setTime","getTime","undefined","ComposedChart","width","height","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","dataKey","YAxis","yAxisId","Label","angle","position","style","textAnchor","orientation","domain","dataMax","Tooltip","Legend","Line","Bar","barSize","fill","Popup","setPrice","setOrderID","image","setImage","setQuality","error","setError","setEthPrice","setOrders","Pcontainer","init","aPrice","handleBuy","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","order_ethprice","order_usdprice","Footer","Button","variant","Home","LoggedContext","createContext","LoggedProvider","children","logged","setLogged","Provider","Account","useContext","setAddress","logAccount","NavContainer","nav","StyledLink","search","setSearch","useHistory","alert","Logo","removeItem","push","DiscountItem","diff","DiscountsCollection","setProtos","filteredResult","filter","Object","keys","Discounts","setPopupCard","Browse","getProtos","NewOwners","setTrades","tradesData","GeneralTab","getQuality","DetailedTab","Details","qualities","useParams","toggleState","setToggleState","toggleTab","index","useGetNFTs","setData","getAllPrices","takerAssetAmount","getAllAssets","axios","resData","getPriceInfo","asset","allPrices","amount_sold","join","buyPrice","actualPrice","getActualPrice","diffPrice","err","iterOnAssets","assets","Card","useWalletData","investment","setInvestment","values","setValues","roi","setRoi","sumBuyPrice","sumValues","sumDiff","getWalletData","WalletData","CardsList","userCards","card","User","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.f2439534.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nexport const ImageWrapper = styled.div`\r\ntransition: all .2s ease-in-out;\r\nborder-radius: 10px;\r\n&:hover{\r\n    transform:scale(1.1);\r\n}\r\n`\r\n\r\nexport const BuyButton = styled.button`\r\n  background-color: green;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const SellButton = styled.button`\r\n  background-color: red;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`;\r\n\r\nexport const DefaultButton = styled.button`\r\nbackground-color: grey;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  margin-top:10%;\r\n  display:flex;\r\n  justify-content : center;\r\n`","import { ImageWrapper } from '../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Item({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item","import { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport Axios from 'axios';\r\nimport { createPortal } from 'react-dom';\r\n\r\n//api endpoint de immuX\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n//adresse ETH de la collection GodsUnchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\n\r\n\r\n/**\r\n * \r\n * @param {*} price \r\n * @returns {string} La conversion du prix en Gwei en prix en eth\r\n */\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @returns {*} le prix de l'eth en USD\r\n */\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * @returns {string}  une liste contenant tous les protos , metadata et leurs prix minimum\r\n */\r\nexport async function getAllProtos() {\r\n\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    let config = {\r\n        headers: { 'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s' },\r\n        params: {\r\n            'tokenAddress': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'\r\n        },\r\n    }\r\n    let url = 'https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders'\r\n    const response = await Axios(url, config)\r\n    const protos = response.data\r\n    return protos;\r\n\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns les 5 ordres de ventes les moins chers\r\n */\r\nexport async function getCheapestSellOrders(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 5,\r\n        status: 'active',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'buy_quantity',\r\n        direction: 'asc'\r\n    });\r\n    return { orders: ordersRequest.result };\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * Convertit le prix des ordres retours de getCheapestSellOrders en USD\r\n * @returns les 5 ordres de vente les moins chers, prix converti en USD\r\n */\r\nexport async function getCheapestUSDSellOrders(metadata) {\r\n    const { orders } = await getCheapestSellOrders(metadata)\r\n    const ethPrice = await getEthPrice();\r\n    orders.forEach((order) => {\r\n        order.buy.data.quantity = (order.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n    })\r\n    return { orders: orders }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @param {*} min_date à partir de quand on récupère les données (1 mois max)\r\n * @returns liste des ventes triées par updated_timestamp croissant\r\n */\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp CROISSANT pour avoir les ordres dans l'ordre chronologique\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        //on trie la liste selon le updated_timestamp croissant\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns \r\n */\r\nexport async function getLastTrades(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp DECROISSANT pour avoir les derniers ordres publiés\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 30,\r\n        status: 'filled',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'timestamp',\r\n        direction: 'desc'\r\n    });\r\n    //trier par updated_timestamp décroissant ()\r\n    ordersRequest.result.sort((a, b) => (b.updated_timestamp.localeCompare(a.updated_timestamp)));\r\n    return ordersRequest.result.slice(0, 5);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} id \r\n * @returns infos sur l'asset en question : {id, owner, name, metadata, creation time...}\r\n */\r\nexport async function getAssetInfo(id) {\r\n\r\n    let url = `https://api.x.immutable.com/v1/assets/${COLLECTION_ADDRESS}/${id}`\r\n    const response = await Axios(url)\r\n    const infos = response.data\r\n    return infos.user\r\n}\r\nexport async function getLastTradesData(metadata) {\r\n    const ethPrice = await getEthPrice();\r\n\r\n    let datas = [];\r\n    try {\r\n        const trades = await getLastTrades(metadata);\r\n        for (const trade of trades) {\r\n            let tokenID = trade.sell.data.id;\r\n            let owner = await getAssetInfo(tokenID)\r\n            let price = (trade.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            datas = datas.concat({ tokenID: tokenID, owner: owner, price: price, uptime: (Date.parse(trade.updated_timestamp) - Date.parse(trade.timestamp)) / 1000 })\r\n        }\r\n\r\n        return datas;\r\n    } catch (err) { console.log(err) }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getAvgDailyPrice(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date date à partir de laquelle on récupère les données (30j max)\r\n * @returns liste contenant les infos liées à chaque ordre de vente rempli.\r\n */\r\nexport async function getAllOrdersHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            price = (+toEthPrice(order.buy.data.quantity))\r\n            price.toFixed(6)\r\n            let dict = {\r\n                time: f_time,\r\n                data: {\r\n                    price: price,\r\n                    volume: 0\r\n                },\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        });\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns liste contenant les infos de chaque carte actuellement en promotion\r\n */\r\nexport const getDiscounts = async () => {\r\n    let url = 'https://gumarkets.freeboxos.fr:5000/discounts'\r\n    const response = await Axios(url)\r\n    const result = response.data\r\n    return result;\r\n\r\n}\r\n\r\n\r\ngetCheapestUSDSellOrders();","import { useState, useEffect } from 'react'\r\nimport Item from './Item'\r\nimport '../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Collection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [searchParam, setSearchParam] = useState(\"\");\r\n\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getAllProtos();\r\n        setAllProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setSearchParam(e.target.value.toLowerCase())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {allProtos.map((proto) => (\r\n\r\n                            JSON.parse(proto.metadata).name.toLowerCase().includes(searchParam) && <Item key={`${proto.token_proto}`} proto={proto}></Item>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Collection","//ImmutableXConnection.js\r\n//Sample Immutable X functions for collection interaction\r\n\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst linkAddress = 'https://link.x.immutable.com';\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n// Ropsten Testnet\r\n//const linkAddress = 'https://link.uat.x.immutable.com';\r\n//const apiAddress = 'https://api.uat.x.immutable.com/v1';\r\n\r\n//The token address for the collection to be monitored. Currently set to Gods Unchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\nconst link = new Link(linkAddress);\r\n\r\n\r\nconst WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nconst STARK_PUBLIC_KEY = 'STARK_PUBLIC_KEY';\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// User Account Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n//Creates or logs a user into their Immutable X account via web3 wallet\r\nexport async function setupAndLogin() {\r\n    const { address, starkPublicKey } = await link.setup({});\r\n    localStorage.setItem(WALLET_ADDRESS, address);\r\n    localStorage.setItem(STARK_PUBLIC_KEY, starkPublicKey);\r\n}\r\n\r\n//Remove the local storage wallet address\r\nexport function logout() {\r\n    localStorage.removeItem('WALLET_ADDRESS');\r\n}\r\n\r\n//Get the user balances\r\nexport async function getUserBalances() {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    return await client.getBalances({ user: address });\r\n}\r\n\r\n//Deposits ETH into Immutable X\r\nexport async function depositEth(amountInEth) {\r\n    await link.deposit({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Starts the withdrawal process from Immutable X\r\nexport async function prepareWithdrawal(amountInEth) {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Finishes the withdrawal process from Immutable X\r\n//Must wait for user balance to have ETH in the withdrawable state \r\nexport async function completeWithdrawal() {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH\r\n    });\r\n}\r\n\r\n//Show user history\r\nexport async function showUserHistory() {\r\n    link.history({});\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////// Asset Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the user's assets\r\n * @param {string} assetCursor - optional cursor parameter \r\n * @returns Object containing the assets and a cursor if more assets remain to be retrieved\r\n */\r\nexport async function getUserAssets(assetCursor) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    const assetsRequest = await client.getAssets({ user: address, cursor: assetCursor, status: 'imx', collection: COLLECTION_ADDRESS });\r\n    return { assets: assetsRequest.result, cursor: assetsRequest.cursor };\r\n}\r\n\r\n\r\nexport async function getAllUserAssets() {\r\n    let assetCursor;\r\n    let assets = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let assetRequest = await client.getAssets({ user: address, status: 'imx', collection: COLLECTION_ADDRESS, sell_orders: true });\r\n            assets = assets.concat(assetRequest.result);\r\n            assetCursor = assetRequest.cursor;\r\n\r\n        } while (assetCursor);\r\n\r\n        for (let asset of assets) {\r\n            asset.isListed = false;\r\n            if (asset.orders?.sell_orders?.length > 0) {\r\n                asset.isListed = true;\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return assets;\r\n    }\r\n\r\n}\r\n\r\n//Opens the Link SDK popup to sell an asset as the specified price\r\nexport async function sellAsset(asset, priceInEth) {\r\n    let sellParams = { amount: priceInEth, tokenId: asset.id, tokenAddress: asset.token_address };\r\n    //Throws an error if not successful\r\n    await link.sell(sellParams);\r\n}\r\n\r\n//Transfers an asset to another address\r\nexport async function transferERC721(asset, addressToSendTo) {\r\n    await link.transfer({\r\n        type: ERC721TokenType.ERC721,\r\n        tokenId: asset.id,\r\n        tokenAddress: asset.token_address,\r\n        to: addressToSendTo\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n///////////////////////// Marketplace Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the cheapest active orders for the collection\r\n * @param {*} ordersCursor - optional cursor parameter \r\n * @param {*} tokenName - optional token name to filter on \r\n * @param {*} metadata - optional JSON string metadata to filter on \r\n * @returns Object containing the cheapest orders and a cursor if more orders remain\r\n */\r\nexport async function getCheapestSellOrders(pageSize, ordersCursor, metadata) {\r\n    try {\r\n        const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n        const ordersRequest = await client.getOrders({\r\n            page_size: pageSize,\r\n            cursor: ordersCursor,\r\n            status: 'active',\r\n            sell_token_address: COLLECTION_ADDRESS,\r\n            sell_metadata: metadata,\r\n            order_by: 'buy_quantity',\r\n            direction: 'asc'\r\n        });\r\n        return { orders: ordersRequest.result, cursor: ordersRequest.cursor };\r\n    } catch (err) {\r\n        console.log(err)\r\n\r\n    }\r\n}\r\n\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        console.log(orders)\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getPriceHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n//Opens the Link SDK popup to complete an order\r\nexport async function fillOrder(order) {\r\n    await link.buy({ orderId: order });\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////","import Axios from \"axios\"\r\n\r\nexport const fetchProtoCollection = async () => {\r\n    let url = 'https://api.godsunchained.com/v0/proto?perPage=2000'\r\n    const response = await Axios(url)\r\n    const assets = response.data.records\r\n    return assets;\r\n\r\n}\r\n\r\n\r\n\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\nexport const fetchBestPrice = async (popupCard, quality) => {\r\n    var result = null\r\n    var bestOrder = {\r\n        minPrice: Number.MAX_SAFE_INTEGER,\r\n        orderID: null\r\n    };\r\n    let url = 'https://api.x.immutable.com/v1/orders'\r\n    const json = JSON.stringify(\r\n        {\r\n            \"proto\": [`${popupCard.id}`],\r\n            \"quality\": [`${quality}`]\r\n        }\r\n    );\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    sell_metadata: json,\r\n                    status: 'active',\r\n                    order_by: 'buy_quantity',\r\n                    direction: 'asc',\r\n\r\n                }\r\n            })\r\n        result = response.data.result\r\n        result.map((order) => {\r\n\r\n            let quantity = order.buy.data.quantity\r\n            let decimals = order.buy.data.decimals\r\n            let currentPrice = (quantity * Math.pow(10, -decimals)).toFixed(6)\r\n            let currentID = order.order_id\r\n            if (bestOrder.minPrice > currentPrice) {\r\n                bestOrder.minPrice = currentPrice;\r\n                bestOrder.orderID = currentID;\r\n            }\r\n        })\r\n\r\n        var image_url = result[0].sell.data.properties.image_url;\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return {\r\n            result,\r\n            bestOrder,\r\n            image_url\r\n        };\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n","import {\r\n    ComposedChart,\r\n    Line,\r\n    Area,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    Scatter,\r\n    ResponsiveContainer,\r\n    Label,\r\n} from 'recharts';\r\nimport { getEthPrice } from '../utils/getProtoCollection.js';\r\nimport { getPriceHistory } from '../utils/ImmutableXConnection.js'\r\nimport { getAllOrdersHistory, getAvgDailyPrice } from '../utils/apiCalls.js';\r\nimport { useState, useEffect } from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { SpinnerWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Chart({ proto, quality, type }) {\r\n    const [history, setHistory] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const Init = async (proto, quality, min_date, type) => {\r\n        setLoading(true)\r\n        console.log(min_date)\r\n        //get price history\r\n        const json = JSON.stringify(\r\n            {\r\n                \"proto\": [`${proto}`],\r\n                \"quality\": [`${quality}`]\r\n            }\r\n        );\r\n        const ethprice = await getEthPrice()\r\n\r\n        if (type === \"month-avg\") {\r\n            const hprices = await getAvgDailyPrice(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"month-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"week-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => (\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            ))\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let min_date;\r\n        switch (type) {\r\n            case (\"month-avg\" || \"month-detailed\"):\r\n                min_date = new Date()\r\n                min_date.setMonth(min_date.getMonth() - 1)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            case \"week-detailed\":\r\n                min_date = new Date()\r\n                min_date.setTime(min_date.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            default:\r\n                min_date = undefined;\r\n        }\r\n        console.log(type)\r\n        console.log(min_date)\r\n        Init(proto, quality, min_date, type)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <SpinnerWrapper>\r\n                    <Spinner animation=\"grow\" /> </SpinnerWrapper>\r\n                :\r\n                <div className=\"d-flex align-items-center\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={400}\r\n                        data={history}\r\n                        margin={{\r\n                            top: 20,\r\n                            right: 20,\r\n                            bottom: 20,\r\n                            left: 20,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#f5f5f5\" />\r\n                        <XAxis dataKey=\"time\" />\r\n                        <YAxis yAxisId=\"left\" dataKey=\"data.price\">\r\n                            <Label angle={270} position='left' style={{ textAnchor: 'middle' }}>\r\n                                USD price\r\n                            </Label>\r\n                        </YAxis>\r\n                        <YAxis yAxisId=\"right\" dataKey=\"data.volume\" orientation=\"right\" domain={[0, dataMax => (dataMax * 5)]}>\r\n                            <Label angle={90} position='right' style={{ textAnchor: 'middle' }}>\r\n                                Volume\r\n                            </Label>\r\n                        </YAxis>\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"data.price\" stroke=\"#8884d8\" />\r\n                        <Bar yAxisId=\"right\" dataKey=\"data.volume\" barSize={5} fill=\"#413ea0\" />\r\n\r\n                    </ComposedChart>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { sellAsset, fillOrder, getOrdersHistory, getCheapestSellOrders, getPriceHistory, toEthPrice } from '../utils/ImmutableXConnection.js'\r\nimport { fetchBestPrice, getEthPrice } from '../utils/getProtoCollection'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nfunction Popup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [orderID, setOrderID] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [quality, setQuality] = useState(\"Meteorite\")\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [ethPrice, setEthPrice] = useState(null);\r\n    const [orders, setOrders] = useState([])\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n  display:flex;\r\n  flex-direction:row;\r\n  justify-content : center;\r\n  align-items:center;\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const { result, bestOrder, image_url } = await fetchBestPrice(popupCard, quality);\r\n            console.log(result, bestOrder, image_url)\r\n            setOrders(result.slice(0, 5))\r\n            setPrice(bestOrder.minPrice)\r\n            setOrderID(bestOrder.orderID)\r\n            const aPrice = await getEthPrice();\r\n            setEthPrice(aPrice);\r\n            setImage(image_url)\r\n            if (bestOrder.orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [quality])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleMeteorite = () => {\r\n        setQuality(\"Meteorite\")\r\n\r\n    }\r\n    const handleShadow = () => {\r\n        setQuality(\"Shadow\")\r\n\r\n    }\r\n    const handleGold = () => {\r\n        setQuality(\"Gold\")\r\n\r\n    }\r\n\r\n    const handleDiamond = () => {\r\n        setQuality(\"Diamond\")\r\n    }\r\n\r\n    const handleSell = () => {\r\n        sellAsset('0x843279e9ee4e64ff7a4d8743df80e5a914ff8053ee40a15b6d7b6a5b195e8375', '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c', 0.01)\r\n    }\r\n\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        error ? <h5>this card is not available for trade</h5> :\r\n                            <div>\r\n                                <p>Quality : {quality}</p>\r\n                                <p>Price : {price} ETH - {(price * ethPrice).toFixed(2)} USD</p>\r\n                                <Pcontainer>\r\n                                    <img src={image} alt={popupCard.id}></img>\r\n                                    <Chart proto={popupCard.id} quality={quality} />\r\n                                </Pcontainer>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <p>For sale:\r\n                                        {orders.map((order) => {\r\n                                            const order_ethprice = toEthPrice(order.buy.data.quantity)\r\n                                            const order_usdprice = (order_ethprice * ethPrice).toFixed(2)\r\n                                            return (\r\n                                                <p><BuyButton value={order.order_id} onClick={handleBuy}>{order_usdprice} USD </BuyButton> : {order_ethprice} ETH</p>\r\n                                            )\r\n                                        }\r\n                                        )}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                    }\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleMeteorite}>\r\n                        Meteorite\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleShadow}>\r\n                        Shadow\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={handleGold}>\r\n                        Gold\r\n                    </Button>\r\n                    <Button variant=\"link\" onClick={handleDiamond}>\r\n                        Diamond\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Popup","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\n\r\nfunction Home() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} loadCollection={fetchProtoCollection} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { useState, createContext } from 'react'\r\n\r\nexport const LoggedContext = createContext()\r\n\r\nexport const LoggedProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(localStorage.getItem('WALLET_ADDRESS') !== null)\r\n\r\n    return (\r\n        <LoggedContext.Provider value={{ logged, setLogged }}>\r\n            {children}\r\n        </LoggedContext.Provider>\r\n    )\r\n}","import { setupAndLogin } from '../utils/ImmutableXConnection'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useEffect, useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router'\r\n\r\nimport OwnedCollection from '../components/OwnedCollection'\r\nimport OwnedPopup from '../components/OwnedPopup'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nfunction Account() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [address, setAddress] = useState('')\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n\r\n\r\n\r\n    async function logAccount() {\r\n        setLoading(true)\r\n        if (!logged) {\r\n            try {\r\n                await setupAndLogin()\r\n                setLogged(true)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n                setLogged(false)\r\n            }\r\n        }\r\n        setAddress(localStorage.getItem('WALLET_ADDRESS'))\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        logAccount();\r\n    }, [])\r\n\r\n\r\n    // return (\r\n    //     <div className=\"container\">\r\n    //         <OwnedCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} user={address} />\r\n    //         {showPopup ?\r\n    //             <OwnedPopup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n    //             : null}\r\n    //     </div>\r\n    // )\r\n    return (\r\n        <>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                < Spinner animation=\"grow\" /> </div > :\r\n                <>\r\n                    <Redirect to={'/godsunchained/user/' + localStorage.getItem('WALLET_ADDRESS')} />\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Account","export default __webpack_public_path__ + \"static/media/logo.aac3612d.png\";","import '../styles/Header.css'\r\nimport styled from 'styled-components'\r\nimport Logo from '../assets/logo.png'\r\nimport { Link } from 'react-router-dom'\r\nimport { setupAndLogin, logout } from '../utils/ImmutableXConnection'\r\nimport { useContext } from 'react'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DefaultButton } from '../styles/GlobalStyle'\r\nimport { useState } from 'react'\r\n\r\nfunction Header() {\r\n\r\n    const NavContainer = styled.nav`\r\n  padding: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n    const StyledLink = styled(Link)`\r\n  padding: 10px 15px;\r\n  color: #c4fffc;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  text-align: center;\r\n`\r\n\r\n\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [search, setSearch] = useState('')\r\n    const history = useHistory();\r\n\r\n    async function handleConnect() {\r\n        if (logged) {\r\n            alert(\"user already connected\")\r\n        }\r\n        else {\r\n            async function logAccount() {\r\n                try {\r\n                    await setupAndLogin()\r\n                    setLogged(true)\r\n                }\r\n                catch (err) {\r\n                    console.log(err)\r\n                    setLogged(false)\r\n                }\r\n            }\r\n            logAccount();\r\n        }\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        if (logged) {\r\n            logout();\r\n            setLogged(false)\r\n            let path = `/browse`;\r\n            history.push(path);\r\n            alert(\"user disconnecterd\")\r\n        }\r\n        else {\r\n            alert(\"user not logged in\")\r\n        }\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex headerWrapper\">\r\n            <div className=\"d-flex\">\r\n                <img src={Logo} className=\"mainLogo\" alt=\"mainLogo\" />\r\n            </div>\r\n            <div className=\"d-flex\">\r\n\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <input type=\"text\" placeholder=\"Enter eth address\" onChange={handleInput} />\r\n                    <StyledLink className=\"link\" to={`/godsunchained/user/${search}`} >Search user</StyledLink>\r\n                </div>\r\n\r\n            </div>\r\n            <NavContainer>\r\n                {logged ? <DefaultButton onClick={handleDisconnect}>Disconnect</DefaultButton> : (<DefaultButton onClick={handleConnect}>Connect</DefaultButton>)}\r\n                <StyledLink className=\"link\" to=\"/godsunchained/browse\" >Browse Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/account\">Your Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/discounts\">Discounts</StyledLink>\r\n            </NavContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { ImageWrapper } from '../../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction DiscountItem({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                        <span>-{proto.diff}%</span>\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscountItem","import { useState, useEffect } from 'react'\r\nimport DiscountItem from './DiscountItem'\r\nimport '../../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getDiscounts } from '../../utils/apiCalls'\r\n\r\nfunction DiscountsCollection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [protos, setProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getDiscounts();\r\n        setAllProtos(myProtos)\r\n        setProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(protos)\r\n    }, [protos])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allProtos.filter((proto) => {\r\n            let metadata = JSON.parse(proto.metadata)\r\n            return metadata.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n        })\r\n\r\n        setProtos(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {Object.keys(protos).map((key) => (\r\n\r\n                            <DiscountItem key={`${protos[key].token_proto}`} proto={protos[key]}></DiscountItem>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default DiscountsCollection","import { useState, useEffect } from 'react'\r\nimport DiscountsCollection from \"../components/Discounts/DiscountsCollection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchDiscounts } from '../utils/getProtoCollection'\r\n\r\nfunction Discounts() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <DiscountsCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Discounts","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\n\r\nfunction Browse() {\r\n\r\n    //Dans la page Browse, on affiche la totalité des ordres (uniques) en \r\n\r\n    const [protos, setProtos] = useState([])\r\n\r\n    const getProtos = (async () => {\r\n        try {\r\n            var myProtos = await getAllProtos();\r\n            setProtos(myProtos)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProtos();\r\n        console.log(protos)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Browse","\r\nimport { useState, useEffect } from 'react'\r\nimport { getLastTradesData, getOrdersHistory, getLastTrades } from '../utils/apiCalls'\r\n\r\nfunction NewOwners({ proto, quality }) {\r\n\r\n    const [trades, setTrades] = useState([])\r\n\r\n    async function init() {\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${quality}`]\r\n                }\r\n            );\r\n            const tradesData = await getLastTradesData(json);\r\n            setTrades(tradesData.slice(0, 5))\r\n        } catch (err) { console.log(err) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n        console.log(trades)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {trades.map((trade) => (\r\n                    <li>owner : {trade.owner}, price:{trade.price}, NFT_id : {trade.tokenID}, temps en seconde : {trade.uptime}</li>\r\n                ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewOwners;","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\n\r\n\r\nfunction GeneralTab({ proto, quality, id, orders, price, getQuality }) {\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Pcontainer>\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-avg\"} />\r\n\r\n            </Pcontainer>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <p>For sale:\r\n                    {orders.map((order) => {\r\n                        return (\r\n                            <p><BuyButton value={order.order_id} onClick={handleBuy}>{price} USD </BuyButton></p>\r\n                        )\r\n                    }\r\n                    )}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralTab","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\nimport NewOwners from \"../NewOwners\";\r\n\r\n\r\nfunction DetailedTab({ proto, quality, id, orders, price, getQuality }) {\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    return (\r\n        <>\r\n            <div className=\"last trades\">\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n\r\n                Last trades :\r\n                <NewOwners proto={proto} quality={getQuality(quality)} />\r\n\r\n            </div>\r\n\r\n            <Pcontainer>\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-detailed\"} />\r\n\r\n            </Pcontainer>\r\n            <Pcontainer>\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"week-detailed\"} />\r\n\r\n            </Pcontainer>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailedTab","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getCheapestUSDSellOrders } from '../utils/apiCalls'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport styled from \"styled-components\";\r\nimport Chart from '../components/Chart'\r\nimport { BuyButton } from '../styles/GlobalStyle'\r\nimport { fillOrder } from '../utils/ImmutableXConnection'\r\nimport '../styles/details.css'\r\nimport NewOwners from \"../components/NewOwners\";\r\nimport GeneralTab from '../components/Details/GeneralTab'\r\nimport DetailedTab from '../components/Details/DetailedTab'\r\n\r\n\r\n\r\n\r\nfunction Details() {\r\n\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    var qualities = {\r\n        4: \"Meteorite\",\r\n        3: \"Shadow\",\r\n        2: \"Gold\",\r\n        1: \"Diamond\"\r\n    };\r\n\r\n    const getQuality = (key) => { return qualities[key] }\r\n\r\n    const { id } = useParams();\r\n    const [proto, quality] = id.split('-')\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const [toggleState, setToggleState] = useState(1);\r\n    const toggleTab = (index) => {\r\n        setToggleState(index);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${getQuality(quality)}`]\r\n                }\r\n            );\r\n            let { orders } = await getCheapestUSDSellOrders(json)\r\n            setOrders(orders)\r\n            setPrice(orders[0].buy.data.quantity)\r\n            if (orders[0].orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ?\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <Spinner animation=\"grow\" /> </div>\r\n                :\r\n                error ? <h5>this card is not available for trade</h5> :\r\n\r\n                    <div>\r\n                        <div className=\"bloc-tabs\">\r\n                            <button\r\n                                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(1)}\r\n                            >\r\n                                General info\r\n                            </button>\r\n                            <button\r\n                                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(2)}\r\n                            >\r\n                                Detailed Info\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"content-tabs\">\r\n                            <div\r\n                                className={toggleState === 1 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <GeneralTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                            <div\r\n                                className={toggleState === 2 ? \"content  active-content\" : \"content\"}\r\n                            >\r\n                                <DetailedTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Details","import { useState, useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport { getEthPrice, getAllProtos } from '../../utils/apiCalls'\r\n\r\n\r\nconst useGetNFTs = (address) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    //const [allPrices, setAllPrices] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n\r\n    /**\r\n     * Retourne la liste des prix de chaque proto\r\n     */\r\n    const getAllPrices = async () => {\r\n        const ethPrice = localStorage.getItem('ethPrice')\r\n        const protos = await getAllProtos();\r\n        protos.forEach((proto) => proto.price = (proto.takerAssetAmount * Math.pow(10, -18) * ethPrice).toFixed(2))\r\n        return protos\r\n    }\r\n    /**\r\n     * \r\n     * @returns {data} la liste de tous les NFT présents sur ImmuX pour l'utilisateur sous forme\r\n     * \"result\": [\r\n            {\r\n                \"token_address\": \"0xacb3c6a43d15b907e8433077b6d38ae40936fe2c\",\r\n                \"id\": \"0x03c53584ad15429d51fa2460e2578868bccd1ce2628741e573837c2a01e198e1\",\r\n                \"user\": \"0x8205aa128988277979ea0fe327f48ce9682f7cc4\",\r\n                \"status\": \"imx\",\r\n                \"uri\": null,\r\n                \"name\": \"Blessing of Death\",\r\n                \"description\": null,\r\n                \"image_url\": \"https://card.godsunchained.com/?id=932&q=4\",\r\n                \"metadata\": {\r\n                    \"god\": \"death\",\r\n                    \"set\": \"trial\",\r\n                    \"mana\": 2,\r\n                    \"name\": \"Blessing of Death\",\r\n                    \"type\": \"card\",\r\n                    \"image\": \"https://card.godsunchained.com/?id=932&q=4\",\r\n                    \"proto\": 932,\r\n                    \"attack\": 0,\r\n                    \"effect\": \"Your relic gains: \\\"Whenever a creature dies, gain 3 favor.\\\"\",\r\n                    \"health\": 0,\r\n                    \"rarity\": \"common\",\r\n                    \"quality\": \"Meteorite\"\r\n                },\r\n                \"collection\": {\r\n                    \"name\": \"Gods Unchained\",\r\n                    \"icon_url\": null\r\n                },\r\n                \"created_at\": \"2021-03-29T18:53:35.608486Z\",\r\n                \"updated_at\": \"2021-07-22T06:23:26.350774Z\"\r\n            },\r\n            ]\r\n     *  \r\n     */\r\n    const getAllAssets = async () => {\r\n        let cursor;\r\n        let data = [];\r\n        const ethPrice = await getEthPrice();\r\n        localStorage.setItem('ethPrice', ethPrice)\r\n\r\n        do {\r\n            let config = {\r\n                params: {\r\n                    'cursor': cursor,\r\n                    'user': address,\r\n                    'order_by': 'updated_at',\r\n                    'direction': 'desc',\r\n                },\r\n            }\r\n            const url = 'https://api.x.immutable.com/v1/assets'\r\n            const response = await axios.get(url, config)\r\n            const result = response.data\r\n            const resData = result.result;\r\n            cursor = result.cursor;\r\n            data = data.concat(resData)\r\n        } while (cursor)\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {*} asset le NFT dont on veut récupérer le prix d'acquisition\r\n     */\r\n    const getPriceInfo = async (asset, allPrices) => {\r\n\r\n        try {\r\n            const ethPrice = localStorage.getItem('ethPrice');\r\n\r\n            let config = {\r\n                params: {\r\n                    'page_size': 20,\r\n                    'buy_token_address': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n                    'buy_token_id': asset.id,\r\n                    'order_by': 'timestamp',\r\n                    'direction': 'desc'\r\n                },\r\n            }\r\n            const url = 'https://api.x.immutable.com/v1/orders'\r\n            const response = await axios.get(url, config)\r\n            const result = response.data.result[0].amount_sold\r\n            const proto = response.data.result[0].buy.data.properties.image_url.split(\"id=\")[1].split(\"&q=\").join(\"-\")\r\n            const price = (result * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            asset.token_proto = proto;\r\n            asset.buyPrice = price;\r\n            asset.actualPrice = getActualPrice(asset.token_proto, allPrices)\r\n            asset.diffPrice = (+asset.actualPrice - +asset.buyPrice).toFixed(2)\r\n            //getActualPrice();\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            asset.token_proto = undefined;\r\n            asset.buyPrice = undefined;\r\n            asset.actualPrice = undefined;\r\n            asset.diffPrice = undefined;\r\n        }\r\n        return null;\r\n\r\n    };\r\n\r\n    const getActualPrice = (token_proto, allPrices) => {\r\n        try {\r\n            return (allPrices.filter((proto) => proto.token_proto === token_proto)[0].price)\r\n        } catch (err) {\r\n            console.log(err)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    const iterOnAssets = async (assets, allPrices) => {\r\n\r\n        for (const asset of assets) {\r\n\r\n            //1. token_proto, 2. buyPrice\r\n            //3. actual_Price\r\n            //4. diff_price\r\n            await getPriceInfo(asset, allPrices)\r\n        };\r\n        return;\r\n    }\r\n\r\n    async function init() {\r\n        try {\r\n            setLoading(true)\r\n\r\n\r\n            // On récupère les prix par proto\r\n            const allPrices = await getAllPrices();\r\n            //On récupère la liste des assets, telle que retournée par l'API\r\n            const assets = await getAllAssets();\r\n            //Pour chaque asset, on lui rajoute une propriété :\r\n            console.log(allPrices)\r\n            console.log(assets)\r\n            await iterOnAssets(assets, allPrices);\r\n            setData(assets)\r\n            setLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    return { data: data, isLoading: isLoading /*allPrices: allPrices*/ }\r\n}\r\n\r\nexport default useGetNFTs","import useCard from \"./useCard\";\r\nimport Item from \"../Item\";\r\n\r\nfunction Card({ data }) {\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {(data.token_proto && data.buyPrice !== undefined) && (\r\n                <div className=\"jumbotron container justify-content-center\">\r\n                    <Item key={`${data.token_proto}`} proto={data} />\r\n                    <p>buying price : {data.buyPrice} </p>\r\n                    <span> actual price : {data.actualPrice}</span>\r\n                    <span> diff : {data.diffPrice}</span>\r\n\r\n                </div>)\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nconst useWalletData = (assets) => {\r\n\r\n    const [investment, setInvestment] = useState(0);\r\n    const [values, setValues] = useState(0);\r\n    const [roi, setRoi] = useState(0);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n\r\n    const getWalletData = (assets) => {\r\n\r\n        setLoading(true)\r\n\r\n        var sumBuyPrice = 0;\r\n        var sumValues = 0;\r\n        var sumDiff = 0;\r\n\r\n        assets.forEach((asset) => {\r\n            if (asset.buyPrice && asset.actualPrice && asset.diffPrice !== undefined) {\r\n                sumBuyPrice += +asset.buyPrice;\r\n                sumValues += +asset.actualPrice;\r\n                sumDiff += +asset.diffPrice;\r\n            }\r\n        });\r\n\r\n        setInvestment(sumBuyPrice)\r\n        setValues(sumValues)\r\n        setRoi(sumDiff)\r\n        setLoading(false)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWalletData(assets);\r\n    }, []);\r\n\r\n    return { investment: investment, values: values, roi: roi, }\r\n\r\n}\r\n\r\nexport default useWalletData","import useWalletData from './useWalletData'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nfunction WalletData({ assets }) {\r\n    const { investment, values, roi, isLoading } = useWalletData(assets);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <>\r\n                    investment : {investment},\r\n                    value : {values},\r\n                    roi : {roi}\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WalletData","import { useState, useEffect } from 'react'\r\nimport useGetNFTs from './useGetNFTs'\r\nimport Card from './Card'\r\nimport WalletData from './WalletData'\r\nimport '../../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nfunction CardsList({ address }) {\r\n\r\n    /**\r\n     * useGetNFTs retourne une liste de toutes les cartes détenues par le compe en question\r\n     * sous forme : \r\n     * [\r\n     *      {   \r\n     *      actualPrice: \"0.58\"\r\n            buyPrice: \"0.51\"\r\n            collection: {name: \"Gods Unchained\", icon_url: null}\r\n            created_at: \"2021-04-06T16:39:26.376618Z\"\r\n            description: null\r\n            diffPrice: \"0.07\"\r\n            id: \"0x086821ef4b22e79493e8487265466f21755de7d24b0e34acb77d124b9ae8f443\"\r\n            image_url: \"https://card.godsunchained.com/?id=917&q=3\"\r\n            metadata: {god: \"neutral\", set: \"trial\", mana: 2, name: \"Vow of Champions\", type: \"card\", …}\r\n            name: \"Vow of Champions\"\r\n            status: \"imx\"\r\n            token_address: \"0xacb3c6a43d15b907e8433077b6d38ae40936fe2c\"\r\n            token_proto: \"917-3\"\r\n            updated_at: \"2021-07-22T08:29:39.46108Z\"\r\n            uri: null\r\n            user: \"0xc137fba1f3438f2512b035e2d16274421d0249db\"\r\n     *      }\r\n     * ]\r\n     */\r\n    const { data: userCards, isLoading } = useGetNFTs(address);\r\n\r\n    const [searchParam, setSearchParam] = useState('');\r\n\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setSearchParam(e.target.value.toLowerCase())\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <>\r\n                    <WalletData assets={userCards} />\r\n                    <ul className=\"list-unstyled\">\r\n                        <div className=\"row\">\r\n                            {userCards.map((card) => (\r\n\r\n                                card.metadata.name.toLowerCase().includes(searchParam) && <Card data={card} />\r\n                            )\r\n                            )}\r\n                        </div>\r\n                    </ul>\r\n                </>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsList","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport CardsList from \"../components/Users/CardsList\";\r\n\r\nfunction User() {\r\n\r\n    const { id: address } = useParams();\r\n    return (\r\n        <div className=\"container\">\r\n            <CardsList address={address} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport LinkWrapper from './components/LinkWrapper';\r\nimport Home from './pages/Home'\r\nimport Account from './pages/Account'\r\nimport Header from './components/Header'\r\nimport Discounts from './pages/Discounts'\r\nimport Browse from './pages/Browse'\r\nimport Details from './pages/Details'\r\nimport User from './pages/User'\r\n\r\nimport { LoggedProvider } from './utils/context'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<LoggedProvider>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Route exact path=\"/godsunchained\">\r\n\t\t\t\t\t<Redirect to=\"/godsunchained/browse\" />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/browse\">\r\n\t\t\t\t\t<Browse />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/account\">\r\n\t\t\t\t\t<Account />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/discounts\">\r\n\t\t\t\t\t<Discounts />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/protos/:id\">\r\n\t\t\t\t\t<Details />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/godsunchained/user/:id\">\r\n\t\t\t\t\t<User />\r\n\t\t\t\t</Route>\r\n\t\t\t</LoggedProvider>\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n"],"sourceRoot":""}