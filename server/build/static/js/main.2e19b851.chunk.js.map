{"version":3,"sources":["styles/GlobalStyle.js","components/Item.js","utils/apiCalls.js","components/Collection.js","utils/ImmutableXConnection.js","utils/getProtoCollection.js","components/Chart.js","components/Popup.js","pages/Home.js","utils/context.js","pages/Account.js","assets/logo.png","components/Header.js","components/Discounts/DiscountItem.js","components/Discounts/DiscountsCollection.js","pages/Discounts.js","pages/Browse.js","components/NewOwners.js","components/Details/GeneralTab.js","components/Details/DetailedTab.js","pages/Details.js","components/Users/useGetNFTs.js","components/Users/Card.js","components/Users/useWalletData.js","components/Users/WalletData.js","components/Users/CardsList.js","pages/User.js","index.js"],"names":["Parallax","styled","div","SearchWrapper","CardWrapper","InfoWrapper","ImageWrapper","BuyButton","button","DefaultButton","SpinnerWrapper","Item","proto","className","to","token_proto","src","split","alt","onClick","undefined","price","JSON","parse","metadata","name","apiAddress","COLLECTION_ADDRESS","toEthPrice","Math","pow","toFixed","getHistoricalEthPrice","a","Axios","get","response","result","data","prices","console","log","getEthPrice","params","USD","getAllProtos","ImmutableXClient","build","publicApiUrl","ethPrice","config","headers","protos","forEach","takerAssetAmount","getCheapestSellOrders","client","getOrders","page_size","status","sell_token_address","sell_metadata","order_by","direction","ordersRequest","orders","getCheapestUSDSellOrders","order","buy","quantity","getOrdersHistory","min_date","localStorage","getItem","cursor","ordersCursors","min_timestamp","concat","sort","b","updated_timestamp","localeCompare","getLastTrades","slice","getAssetInfo","id","url","infos","user","getLastTradesData","datas","trades","trade","tokenID","sell","owner","uptime","Date","timestamp","getAvgDailyPrice","h_prices","map","Map","unixtime","time","f_time","toLocaleDateString","day","month","unix_time","setUTCHours","has","res","volume","set","value","key","dict","getAllOrdersHistory","getDiscounts","Collection","showPopup","setPopup","useState","allProtos","setAllProtos","isLoading","setLoading","searchParam","setSearchParam","myProtos","useEffect","initPage","type","placeholder","onChange","e","target","toLowerCase","Spinner","animation","includes","link","Link","WALLET_ADDRESS","STARK_PUBLIC_KEY","setupAndLogin","setup","address","starkPublicKey","setItem","fillOrder","orderId","fetchBestPrice","popupCard","quality","bestOrder","minPrice","Number","MAX_SAFE_INTEGER","orderID","json","stringify","decimals","currentPrice","currentID","order_id","image_url","properties","Chart","history","setHistory","Init","ethPriceHistory","ethcurrentPrice","hprices","elem","found","find","element","ethprice","setMonth","getMonth","toISOString","setTime","getTime","ComposedChart","width","height","margin","top","right","bottom","left","XAxis","dataKey","stroke","YAxis","yAxisId","Label","angle","position","style","textAnchor","fill","orientation","domain","dataMax","Tooltip","contentStyle","wrapperStyle","color","itemStyle","Legend","Line","dot","Bar","barSize","Popup","setPrice","setOrderID","image","setImage","setQuality","error","setError","setEthPrice","setOrders","Pcontainer","init","aPrice","handleBuy","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","order_ethprice","order_usdprice","Footer","Button","variant","Home","LoggedContext","createContext","LoggedProvider","children","logged","setLogged","Provider","Account","useContext","setAddress","logAccount","NavContainer","nav","StyledLink","HeaderWrapper","search","setSearch","useHistory","alert","Logo","removeItem","push","DiscountItem","diff","DiscountsCollection","setProtos","filteredResult","filter","Object","keys","Discounts","setPopupCard","Browse","NewOwners","WhiteText","table","setTrades","tradesData","scope","GeneralTab","getQuality","DetailedTab","Details","qualities","useParams","toggleState","setToggleState","toggleTab","index","useGetNFTs","setData","statePoints","setPoints","points","getAllPrices","getAllAssets","axios","resData","getPriceInfo","asset","allPrices","amount_sold","join","totalprotos","buyPrice","actualPrice","getActualPrice","diffPrice","err","iterOnAssets","assets","Card","useWalletData","investment","setInvestment","values","setValues","roi","setRoi","sumBuyPrice","sumValues","sumDiff","getWalletData","WalletData","CardsList","userCards","card","User","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"y//hCAWaA,GARoBC,IAAOC,IAAV,2UAQND,IAAOC,IAAV,6aAaRC,EAAgBF,IAAOC,IAAV,iGAYbE,GALoBH,IAAOC,IAAV,yNAKHD,IAAOC,IAAV,mLAWXG,EAAcJ,IAAOC,IAAV,6HAQXI,EAAeL,IAAOC,IAAV,4HAQZK,EAAYN,IAAOO,OAAV,kPA2BTC,GAdaR,IAAOO,OAAV,qQAcMP,IAAOO,OAAV,qQAcbE,EAAiBT,IAAOC,IAAV,yLCnEZS,MAjCf,YAA0B,IAAVC,EAAS,EAATA,MAOZ,OACI,cAAC,EAAD,CAAaC,UAAU,MAAvB,SACI,+BACI,cAACP,EAAD,UACI,cAAC,IAAD,CAAMQ,GAAE,gCAA2BF,EAAMG,aAAzC,SACI,qBAAKF,UAAU,iBAAiBG,IAAG,6CAAwCJ,EAAMG,YAAYE,MAAM,KAAK,GAArE,cAA6EL,EAAMG,YAAYE,MAAM,KAAK,IAAMC,IAAG,UAAKN,EAAMG,YAAX,UAAgCI,QATtL,wBAYSC,IAAhBR,EAAMS,OACH,eAAChB,EAAD,WACI,+BACKiB,KAAKC,MAAMX,EAAMY,UAAUC,OAEhC,iCACKb,EAAMS,MADX,YAXHT,EAAMG,gB,sECNrBW,EAAa,iCAEbC,EAAqB,6CASdC,EAAa,SAACP,GACvB,OAAQA,EAAQQ,KAAKC,IAAI,IAAK,KAAKC,QAAQ,IAIlCC,EAAqB,uCAAG,8BAAAC,EAAA,4DACvB,uGADuB,kBAGNC,IAAMC,IAFvB,wGADuB,cAGvBC,EAHuB,OAIvBC,EAASD,EAASE,KAJK,kBAKtBD,EAAOE,QALe,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,qDAerBC,EAAW,uCAAG,8BAAAT,EAAA,4DACb,+CADa,kBAGIC,IAAMC,IAFvB,+CAGF,CACIQ,OACA,CACI,KAAQ,MACR,MAAS,SARF,cAGbP,EAHa,OAWbC,EAASD,EAASE,KAXL,kBAYZD,EAAOO,KAZK,gCAcnBJ,QAAQC,IAAR,MAdmB,yDAAH,qDAwBjB,SAAeI,IAAtB,+B,4CAAO,kCAAAZ,EAAA,sEAEkBa,mBAAiBC,MAAM,CAAEC,aAActB,IAFzD,8BAGoBgB,IAHpB,cAGGO,EAHH,OAICC,EAAS,CACTC,QAAS,CAAE,YAAa,4CACxBR,OAAQ,CACJ,aAAgB,+CAGd,wEAVP,UAWoBT,IADb,wEACwBgB,GAX/B,eAWGd,EAXH,QAYGgB,EAAShB,EAASE,MACjBe,SAAQ,SAACzC,GAAD,OAAWA,EAAMS,OAAST,EAAM0C,iBAAmBL,EAAWpB,KAAKC,IAAI,IAAK,KAAKC,QAAQ,MAbrG,kBAcIqB,GAdJ,6C,sBAwBA,SAAeG,EAAtB,kC,4CAAO,WAAqC/B,GAArC,iBAAAS,EAAA,sEACkBa,mBAAiBC,MAAM,CAAEC,aAActB,IADzD,cACG8B,EADH,gBAEyBA,EAAOC,UAAU,CACzCC,UAAW,EACXC,OAAQ,SACRC,mBAAoB,6CACpBC,cAAerC,EACfsC,SAAU,eACVC,UAAW,QARZ,cAEGC,EAFH,yBAUI,CAAEC,OAAQD,EAAc3B,SAV5B,4C,sBAoBA,SAAe6B,EAAtB,mC,8CAAO,WAAwC1C,GAAxC,mBAAAS,EAAA,sEACsBsB,EAAsB/B,GAD5C,uBACKyC,EADL,EACKA,OADL,SAEoBvB,IAFpB,cAEGO,EAFH,OAGHgB,EAAOZ,SAAQ,SAACc,GACZA,EAAMC,IAAI9B,KAAK+B,UAAYF,EAAMC,IAAI9B,KAAK+B,SAAWxC,KAAKC,IAAI,IAAK,IAAMmB,GAAUlB,QAAQ,MAJ5F,kBAMI,CAAEkC,OAAQA,IANd,4C,sBAgBA,SAAeK,GAAtB,qC,8CAAO,WAAgC9C,EAAU+C,GAA1C,qBAAAtC,EAAA,6DAECgC,EAAS,GAFV,SAGkBnB,mBAAiBC,MAAM,CAAEC,aAActB,IAHzD,OAGG8B,EAHH,OAKagB,aAAaC,QAAQ,kBALlC,gCAQ+BjB,EAAOC,UAAU,CACvCC,UAAW,IACXgB,OAAQC,EACRhB,OAAQ,SACRC,mBAAoBjC,EACpBkC,cAAerC,EACfsC,SAAU,YACVC,UAAW,MACXa,cAAeL,IAhBxB,OAQSP,EART,OAmBKC,EAASA,EAAOY,OAAOb,EAAc3B,QACrCsC,EAAgBX,EAAcU,OApBnC,WAuBUC,EAvBV,wBAyBCV,EAAOa,MAAK,SAAC7C,EAAG8C,GAAJ,OAAW9C,EAAE+C,kBAAkBC,cAAcF,EAAEC,sBAzB5D,kDA2BCxC,QAAQC,IAAR,MA3BD,2CA8BQwB,GA9BR,iE,sBAwCA,SAAeiB,GAAtB,mC,8CAAO,WAA6B1D,GAA7B,iBAAAS,EAAA,sEACkBa,mBAAiBC,MAAM,CAAEC,aAActB,IADzD,cACG8B,EADH,gBAGyBA,EAAOC,UAAU,CACzCC,UAAW,GACXC,OAAQ,SACRC,mBAAoB,6CACpBC,cAAerC,EACfsC,SAAU,YACVC,UAAW,SATZ,cAGGC,EAHH,QAYW3B,OAAOyC,MAAK,SAAC7C,EAAG8C,GAAJ,OAAWA,EAAEC,kBAAkBC,cAAchD,EAAE+C,sBAZtE,kBAaIhB,EAAc3B,OAAO8C,MAAM,EAAG,IAblC,4C,sBAsBA,SAAeC,GAAtB,mC,8CAAO,WAA4BC,GAA5B,mBAAApD,EAAA,6DAECqD,EAFD,gDAEgD3D,EAFhD,YAEsE0D,GAFtE,SAGoBnD,IAAMoD,GAH1B,cAGGlD,EAHH,OAIGmD,EAAQnD,EAASE,KAJpB,kBAKIiD,EAAMC,MALV,4C,sBAOA,SAAeC,GAAtB,mC,8CAAO,WAAiCjE,GAAjC,+BAAAS,EAAA,sEACoBS,IADpB,cACGO,EADH,OAGCyC,EAAQ,GAHT,kBAKsBR,GAAc1D,GALpC,OAKOmE,EALP,qBAMqBA,GANrB,iEAMYC,EANZ,QAOSC,EAAUD,EAAME,KAAKxD,KAAK+C,GAPnC,UAQuBD,GAAaS,GARpC,QAQSE,EART,OASS1E,GAASuE,EAAMxB,IAAI9B,KAAK+B,SAAWxC,KAAKC,IAAI,IAAK,IAAMmB,GAAUlB,QAAQ,GAC7E2D,EAAQA,EAAMb,OAAO,CAAEgB,QAASA,EAASE,MAAOA,EAAO1E,MAAOA,EAAO2E,QAASC,KAAK1E,MAAMqE,EAAMZ,mBAAqBiB,KAAK1E,MAAMqE,EAAMM,YAAc,MAVxJ,yKAaQR,GAbR,kCAcalD,QAAQC,IAAR,MAdb,wE,sBAuBA,SAAe0D,GAAtB,qC,8CAAO,WAAgC3E,EAAU+C,GAA1C,qBAAAtC,EAAA,6DACCmE,EAAW,GACF,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxHC,EAAM,IAAIC,IAHX,kBAOsBhC,GAAiB9C,EAAU+C,GAPjD,qBAQQlB,SAAQ,SAACc,GAEZ,IAAIoC,EAAWN,KAAK1E,MAAM4C,EAAMa,mBAC5BwB,EAAO,IAAIP,KAAKM,GAChBE,EAASD,EAAKE,mBAAmB,QAAS,CAAEC,IAAK,UAAWC,MAAO,SACnEC,EAAYL,EAAKM,YAAY,EAAG,EAAG,EAAG,GAC1C,GAAIT,EAAIU,IAAIN,GAAS,CACjB,IAAMO,EAAMX,EAAIlE,IAAIsE,GACpBpF,GAAU2F,EAAI3F,QAASO,EAAWuC,EAAMC,IAAI9B,KAAK+B,UACjDhD,GAAS,EACT4F,EAASD,EAAIC,YAGbA,EAAS,EACT5F,GAAUO,EAAWuC,EAAMC,IAAI9B,KAAK+B,UAGxChD,EAAMU,QAAQ,GAEdsE,EAAIa,IAAIT,EAAQ,CAAEpF,MAAOA,EAAO4F,OAASA,EAAS,EAAIJ,iBAE1DR,EAAIhD,SAAQ,SAAC8D,EAAOC,GAChB,IAAIC,EAAO,CACPb,KAAMY,EACN9E,KAAM6E,GAGVf,EAAWA,EAASvB,OAAOwC,MAnChC,kBAqCQjB,GArCR,kCAuCC5D,QAAQC,IAAR,MAvCD,2D,sBAkDA,SAAe6E,GAAtB,qC,8CAAO,WAAmC9F,EAAU+C,GAA7C,mBAAAtC,EAAA,6DACCmE,EAAW,GACL,IAAIE,IAFX,kBAMsBhC,GAAiB9C,EAAU+C,GANjD,cAMON,EANP,OAOCzB,QAAQC,IAAIwB,GACZA,EAAOZ,SAAQ,SAACc,GAEZ,IAAIoC,EAAWN,KAAK1E,MAAM4C,EAAMa,mBAC5BwB,EAAO,IAAIP,KAAKM,GAChBE,EAASD,EAAKE,mBAAmB,QAAS,CAAEC,IAAK,UAAWC,MAAO,SACnEC,EAAYL,EAAKM,YAAY,EAAG,EAAG,EAAG,IAC1CzF,GAAUO,EAAWuC,EAAMC,IAAI9B,KAAK+B,WAC9BtC,QAAQ,GACd,IAAIsF,EAAO,CACPb,KAAMC,EACNnE,KAAM,CACFjB,MAAOA,EACP4F,OAAQ,EACRJ,UAAWA,IAGnBT,EAAWA,EAASvB,OAAOwC,MAxBhC,kBA0BQjB,GA1BR,kCA4BC5D,QAAQC,IAAR,MA5BD,2D,sBAoCA,IAAM8E,GAAY,uCAAG,8BAAAtF,EAAA,4DACd,gDADc,SAEDC,IADb,iDADc,cAElBE,EAFkB,OAGlBC,EAASD,EAASE,KAHA,kBAIjBD,GAJiB,2CAAH,qDASzB6B,ICzPesD,OApDf,YAA6C,EAAvBC,UAAuB,EAAZC,SAAa,IAC1C,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAHyC,4CAOzC,4BAAAhG,EAAA,sEAEQ8F,GAAW,GAFnB,SAG+BlF,IAH/B,OAGcqF,EAHd,OAIQL,EAAaK,GACb1F,QAAQC,IAAIyF,GACZH,GAAW,GANnB,kDAOoBvF,QAAQC,IAAR,MAPpB,2DAPyC,sBA0BzC,OATA0F,qBAAU,YAjB+B,mCAkBrCC,KACD,IAQC,qCACI,cAACjI,EAAD,CAAeU,UAAU,0CAAzB,SACI,uBAAOwH,KAAK,OAAOC,YAAY,gBAAgBC,SAPvC,SAACC,GACjBP,EAAeO,EAAEC,OAAOtB,MAAMuB,oBAQzBZ,EACG,qBAAKjH,UAAU,0CAAf,SACI,cAAC8H,EAAA,EAAD,CAASC,UAAU,WAGvB,oBAAI/H,UAAU,gBAAd,SACI,qBAAKA,UAAU,MAAf,SACK+G,EAAUvB,KAAI,SAACzF,GAEZ,YAA4CQ,IAApCE,KAAKC,MAAMX,EAAMY,UAAUC,MAAsBH,KAAKC,MAAMX,EAAMY,UAAUC,KAAKiH,cAAcG,SAASb,IAAgB,cAAC,EAAD,CAAmCpH,MAAOA,GAA1C,UAAcA,EAAMG,yBC/B1K+H,I,OAAO,IAAIC,OATG,iCAYdC,GAAiB,iBACjBC,GAAmB,mBAOlB,SAAeC,KAAtB,gC,8CAAO,gCAAAjH,EAAA,sEACuC6G,GAAKK,MAAM,IADlD,gBACKC,EADL,EACKA,QAASC,EADd,EACcA,eACjB7E,aAAa8E,QAAQN,GAAgBI,GACrC5E,aAAa8E,QAAQL,GAAkBI,GAHpC,4C,sBA+NA,SAAeE,GAAtB,mC,8CAAO,WAAyBpF,GAAzB,SAAAlC,EAAA,sEACG6G,GAAK1E,IAAI,CAAEoF,QAASrF,IADvB,4C,sBAIA,IAAMvC,GAAa,SAACP,GACvB,OAAQA,EAAQQ,KAAKC,IAAI,IAAK,KAAKC,QAAQ,ICpPlCW,GAAW,uCAAG,8BAAAT,EAAA,4DACb,+CADa,kBAGIC,IAAMC,IAFvB,+CAGF,CACIQ,OACA,CACI,KAAQ,MACR,MAAS,SARF,cAGbP,EAHa,OAWbC,EAASD,EAASE,KAXL,kBAYZD,EAAOO,KAZK,gCAcnBJ,QAAQC,IAAR,MAdmB,yDAAH,qDAiBXgH,GAAc,uCAAG,WAAOC,EAAWC,GAAlB,uBAAA1H,EAAA,6DACtBI,EAAS,KACTuH,EAAY,CACZC,SAAUC,OAAOC,iBACjBC,QAAS,MAEH,wCACJC,EAAO3I,KAAK4I,UACd,CACI,MAAS,CAAC,GAAD,OAAIR,EAAUrE,KACvB,QAAW,CAAC,GAAD,OAAIsE,MAVG,kBAcCzH,IAAMC,IARvB,wCASF,CACIQ,OACA,CACIkB,cAAeoG,EACftG,OAAQ,SACRG,SAAU,eACVC,UAAW,SArBD,OAchB3B,EAdgB,QAyBtBC,EAASD,EAASE,KAAKD,QAChBgE,KAAI,SAAClC,GAER,IAAIE,EAAWF,EAAMC,IAAI9B,KAAK+B,SAC1B8F,EAAWhG,EAAMC,IAAI9B,KAAK6H,SAC1BC,GAAgB/F,EAAWxC,KAAKC,IAAI,IAAKqI,IAAWpI,QAAQ,GAC5DsI,EAAYlG,EAAMmG,SAClBV,EAAUC,SAAWO,IACrBR,EAAUC,SAAWO,EACrBR,EAAUI,QAAUK,MAIxBE,EAAYlI,EAAO,GAAGyD,KAAKxD,KAAKkI,WAAWD,UAtCzB,kDAyCtB/H,QAAQC,IAAR,MAzCsB,2CA4Cf,CACHJ,SACAuH,YACAW,cA/CkB,gEAAH,wD,gFC+GZE,I,GAAAA,GAvHf,YAA0C,IAAzB7J,EAAwB,EAAxBA,MAAO+I,EAAiB,EAAjBA,QAAStB,EAAQ,EAARA,KAC7B,EAA8BV,mBAAS,IAAvC,mBAAO+C,EAAP,KAAgBC,EAAhB,KACA,EAAgChD,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KAEM6C,EAAI,uCAAG,WAAOhK,EAAO+I,EAASpF,EAAU8D,GAAjC,2BAAApG,EAAA,6DACT8F,GAAW,GAELkC,EAAO3I,KAAK4I,UACd,CACI,MAAS,CAAC,GAAD,OAAItJ,IACb,QAAW,CAAC,GAAD,OAAI+I,MANd,SASqB3H,IATrB,cASH6I,EATG,gBAUqBnI,IAVrB,UAUHoI,EAVG,OAaI,cAATzC,EAbK,kCAciBlC,GAAiB8D,EAAM1F,GAdxC,SAcCwG,EAdD,QAeG1H,SAAQ,SAAC2H,GACb,IAAIC,EAAQJ,EAAgBK,MAAK,SAAAC,GAAO,OAAIA,EAAQ,KAAOH,EAAK1I,KAAKuE,aACrEuE,OAAqBhK,IAAV6J,EAAsBH,EAAkBG,EAAM,GACzDD,EAAK1I,KAAKjB,QAAU2J,EAAK1I,KAAKjB,MAAQ+J,GAAUrJ,QAAQ,MAE5DS,QAAQC,IAAIsI,GACZJ,EAAWI,GArBN,2BAuBS,mBAAT1C,EAvBA,kCAwBiBf,GAAoB2C,EAAM1F,GAxB3C,SAwBCwG,EAxBD,QAyBG1H,SAAQ,SAAC2H,GACb,IAAIC,EAAQJ,EAAgBK,MAAK,SAAAC,GAAO,OAAIA,EAAQ,KAAOH,EAAK1I,KAAKuE,aACrEuE,OAAqBhK,IAAV6J,EAAsBH,EAAkBG,EAAM,GACzDD,EAAK1I,KAAKjB,QAAU2J,EAAK1I,KAAKjB,MAAQ+J,GAAUrJ,QAAQ,MAE5D4I,EAAWI,GA9BN,2BAgCS,kBAAT1C,EAhCA,kCAiCiBf,GAAoB2C,EAAM1F,GAjC3C,SAiCCwG,EAjCD,QAkCG1H,QAAR,uCAAgB,WAAO2H,GAAP,eAAA/I,EAAA,sDACRgJ,EAAQJ,EAAgBK,MAAK,SAAAC,GAAO,OAAIA,EAAQ,KAAOH,EAAK1I,KAAKuE,aACrEuE,OAAqBhK,IAAV6J,EAAsBH,EAAkBG,EAAM,GACzDD,EAAK1I,KAAKjB,QAAU2J,EAAK1I,KAAKjB,MAAQ+J,GAAUrJ,QAAQ,GAH5C,2CAAhB,uDAKA4I,EAAWI,GAvCN,QA0CThD,GAAW,GA1CF,4CAAH,4DAwEV,OA3BAI,qBAAU,WAEN,IAAI5D,EACJ,OAAQ8D,GACJ,IAAM,aACF9D,EAAW,IAAI0B,MACNoF,SAAS9G,EAAS+G,WAAa,GACxC/G,EAAWA,EAASgH,cACpB,MACJ,IAAK,iBACDhH,EAAW,IAAI0B,MACNuF,QAAQjH,EAASkH,UAAY,QACtClH,EAAWA,EAASgH,cACpB,MACJ,IAAM,kBACFhH,EAAW,IAAI0B,MACNoF,SAAS9G,EAAS+G,WAAa,GACxC/G,EAAWA,EAASgH,cACpB,MACJ,QACI/I,QAAQC,IAAI,gBAAiB4F,GAC7B9D,OAAWnD,EAEnBwJ,EAAKhK,EAAO+I,EAASpF,EAAU8D,KAEhC,IAGC,mCAEKP,EACG,eAACpH,EAAD,WACI,cAACiI,EAAA,EAAD,CAASC,UAAU,SADvB,OAGA,qBAAK/H,UAAU,4BAAf,SACI,eAAC6K,GAAA,EAAD,CACIC,MAAO,IACPC,OAAQ,IACRtJ,KAAMoI,EACNmB,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IARd,UAYI,cAACC,GAAA,EAAD,CAAOC,QAAQ,OAAOC,OAAO,YAC7B,cAACC,GAAA,EAAD,CAAOC,QAAQ,OAAO7K,KAAK,QAAQ0K,QAAQ,aAAaC,OAAO,UAA/D,SACI,cAACG,GAAA,EAAD,CAAOC,MAAO,IAAKC,SAAS,OAAOC,MAAO,CAAEC,WAAY,SAAUC,KAAM,WAAxE,yBAIJ,cAACP,GAAA,EAAD,CAAOC,QAAQ,QAAQ7K,KAAK,SAAS0K,QAAQ,cAAcU,YAAY,QAAQC,OAAQ,CAAC,EAAG,SAAAC,GAAO,OAAe,EAAVA,IAAeX,OAAO,UAA7H,SACI,cAACG,GAAA,EAAD,CAAOC,MAAO,GAAIC,SAAS,QAAQC,MAAO,CAAEC,WAAY,SAAUC,KAAM,WAAxE,sBAIJ,cAACI,GAAA,EAAD,CAASC,aAAc,CAAE,mBAAoB,0BAA4BC,aAAc,CAAEC,MAAO,SAAWC,UAAW,CAAED,MAAO,WAC/H,cAACE,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAMhB,QAAQ,OAAOiB,KAAK,EAAO9L,KAAK,QAAQ4G,KAAK,WAAW8D,QAAQ,aAAaC,OAAO,aAC1F,cAACoB,GAAA,EAAD,CAAKlB,QAAQ,QAAQ7K,KAAK,SAAS0K,QAAQ,cAAcsB,QAAS,EAAGb,KAAK,oBCgCnFc,OAvJf,YAAoD,IAAnCjG,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAAUgC,EAAa,EAAbA,UAElC,EAA0B/B,mBAAS,MAAnC,mBAAOtG,EAAP,KAAcsM,EAAd,KACA,EAA8BhG,mBAAS,MAAvC,mBAAgBiG,GAAhB,WACA,EAA0BjG,mBAAS,MAAnC,mBAAOkG,EAAP,KAAcC,EAAd,KACA,EAA8BnG,mBAAS,aAAvC,mBAAOgC,EAAP,KAAgBoE,EAAhB,KACA,EAA0BpG,oBAAS,GAAnC,mBAAOqG,EAAP,KAAcC,EAAd,KACA,EAAgCtG,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,MAAzC,mBAAO1E,EAAP,KAAiBiL,EAAjB,KACA,EAA4BvG,mBAAS,IAArC,mBAAO1D,EAAP,KAAekK,EAAf,KAGMC,EAAanO,IAAOC,IAAV,2LAZ+B,SAwBhCmO,IAxBgC,2EAwB/C,oCAAApM,EAAA,6DACI8F,GAAW,GADf,SAGQkG,GAAS,GAHjB,SAKuDxE,GAAeC,EAAWC,GALjF,uBAKgBtH,EALhB,EAKgBA,OAAQuH,EALxB,EAKwBA,UAAWW,EALnC,EAKmCA,UAC3B/H,QAAQC,IAAIJ,EAAQuH,EAAWW,GAC/B4D,EAAU9L,EAAO8C,MAAM,EAAG,IAC1BwI,EAAS/D,EAAUC,UACnB+D,EAAWhE,EAAUI,SAT7B,UAU6BtH,KAV7B,QAUc4L,EAVd,OAWQJ,EAAYI,GACZR,EAASvD,GACiB,OAAtBX,EAAUI,SACViE,GAAS,GAdrB,kDAkBQA,GAAS,GACTzL,QAAQC,IAAR,MAnBR,yBAsBQsF,GAAW,GAtBnB,8EAxB+C,+BAsFhCwG,EAtFgC,8EAsF/C,WAAyB/F,GAAzB,SAAAvG,EAAA,+EAEcsH,GAAUf,EAAEC,OAAOtB,OAFjC,sDAKQ3E,QAAQC,IAAR,MALR,yDAtF+C,sBA+F/C,OA5CA0F,qBAAU,WACNkG,EAAK3E,EAAWC,KACjB,IAEHxB,qBAAU,WACNkG,EAAK3E,EAAWC,KACjB,CAACA,IAuCA,mCAEI,eAAC6E,EAAA,EAAD,CAAOC,KAAMhH,EAAWiH,OAvCZ,WAChBhH,GAAUD,IAsCuCkH,gBAAgB,YAA7D,UACI,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,UAAcpF,EAAUjI,SAE5B,cAAC+M,EAAA,EAAMO,KAAP,UACKjH,EACG,sBAAKjH,UAAU,0CAAf,UACI,cAAC8H,EAAA,EAAD,CAASC,UAAU,SADvB,OAGAoF,EAAQ,sEACJ,gCACI,2CAAcrE,KACd,yCAAYtI,EAAZ,WAA2BA,EAAQ4B,GAAUlB,QAAQ,GAArD,UACA,eAACqM,EAAD,WACI,qBAAKpN,IAAK6M,EAAO3M,IAAKwI,EAAUrE,KAChC,cAAC,GAAD,CAAOzE,MAAO8I,EAAUrE,GAAIsE,QAASA,OAEzC,qBAAK9I,UAAU,gCAAf,SACI,0CACKoD,EAAOoC,KAAI,SAAClC,GACT,IAAM6K,EAAiBpN,GAAWuC,EAAMC,IAAI9B,KAAK+B,UAC3C4K,GAAkBD,EAAiB/L,GAAUlB,QAAQ,GAC3D,OACI,8BAAG,eAACxB,EAAD,CAAW4G,MAAOhD,EAAMmG,SAAUnJ,QAASoN,EAA3C,UAAuDU,EAAvD,WAAH,MAA8FD,EAA9F,uBAUhC,eAACR,EAAA,EAAMU,OAAP,WACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYjO,QApEpB,WACpB4M,EAAW,cAmEC,uBAGA,cAACoB,EAAA,EAAD,CAAQC,QAAQ,UAAUjO,QAnErB,WACjB4M,EAAW,WAkEC,oBAGA,cAACoB,EAAA,EAAD,CAAQC,QAAQ,UAAUjO,QAlEvB,WACf4M,EAAW,SAiEC,kBAGA,cAACoB,EAAA,EAAD,CAAQC,QAAQ,OAAOjO,QAhEjB,WAClB4M,EAAW,YA+DC,8BClILsB,ICrBFC,GAAgBC,0BAEhBC,GAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,EAA4B9H,mBAAoD,OAA3CnD,aAAaC,QAAQ,mBAA1D,mBAAOiL,EAAP,KAAeC,EAAf,KAEA,OACI,cAACL,GAAcM,SAAf,CAAwBzI,MAAO,CAAEuI,SAAQC,aAAzC,SACKF,KCsDEI,I,SAAAA,GArDf,WAEI,MAA8BC,qBAAWR,IAAjCI,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAChB,EAA8BhI,mBAAS,IAAvC,mBAAgBoI,GAAhB,WACA,EAA8BpI,oBAAS,GAAvC,mBACA,GADA,UACkCA,mBAAS,OAA3C,mBACA,GADA,UACgCA,oBAAS,IAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KANe,4CAWf,sBAAA9F,EAAA,yDACI8F,GAAW,GACN2H,EAFT,0CAIkBxG,KAJlB,OAKYyG,GAAU,GALtB,gDAQYnN,QAAQC,IAAR,MACAkN,GAAU,GATtB,QAYII,EAAWvL,aAAaC,QAAQ,mBAChCsD,GAAW,GAbf,0DAXe,sBAwCf,OAbAI,qBAAU,YA3BK,mCA4BX6H,KACD,IAYC,mCACKlI,EAAY,sBAAKjH,UAAU,0CAAf,UACT,cAAE8H,EAAA,EAAF,CAAUC,UAAU,SADX,OAET,mCACI,cAAC,IAAD,CAAU9H,GAAI,uBAAyB0D,aAAaC,QAAQ,yBCvDjE,I,OAAA,IAA0B,kCC6G1BmK,OAlGf,WAGI,IAAMqB,EAAehQ,IAAOiQ,IAAV,6HAMZC,EAAalQ,YAAO8I,IAAP9I,CAAH,6IAQVmQ,EAAgBnQ,IAAOiQ,IAAV,+iBAiBnB,EAA8BJ,qBAAWR,IAAjCI,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAChB,EAA4BhI,mBAAS,IAArC,mBAAO0I,EAAP,KAAeC,EAAf,KACM5F,EAAU6F,cApCF,4CAsCd,sBAAAtO,EAAA,sDACQyN,EACAc,MAAM,0BAEL,uCACD,sBAAAvO,EAAA,+EAEciH,KAFd,OAGQyG,GAAU,GAHlB,gDAMQnN,QAAQC,IAAR,MACAkN,GAAU,GAPlB,yDADC,oDAWDK,GAfR,4CAtCc,sBA2Ed,OACI,eAACI,EAAD,WACI,8BACI,qBAAKpP,IAAKyP,GAAM5P,UAAU,WAAWK,IAAI,eAE7C,8BAEI,sBAAKL,UAAU,iCAAf,UACI,uBAAOwH,KAAK,OAAOC,YAAY,oBAAoBC,SAb/C,SAACC,GACjB8H,EAAU9H,EAAEC,OAAOtB,UAaP,cAACgJ,EAAD,CAAYtP,UAAU,OAAOC,GAAE,8BAAyBuP,GAAxD,8BAIR,eAACJ,EAAD,WACKP,EAAS,cAACjP,EAAD,CAAeU,QAhCZ,WACrB,GAAIuO,EAAQ,CRjChBlL,aAAakM,WAAW,kBQmChBf,GAAU,GAEVjF,EAAQiG,KADA,WAERH,MAAM,2BAGNA,MAAM,uBAuBQ,wBAAwE,cAAC/P,EAAD,CAAeU,QAzF/F,2CAyFgF,qBAClF,cAACgP,EAAD,CAAYtP,UAAU,OAAOC,GAAG,wBAAhC,0BACA,cAACqP,EAAD,CAAYtP,UAAU,OAAOC,GAAG,yBAAhC,wBACA,cAACqP,EAAD,CAAYtP,UAAU,OAAOC,GAAG,2BAAhC,8BC7ED8P,OAtBf,YAAkC,IAAVhQ,EAAS,EAATA,MAOpB,OACI,8BACI,6BACI,cAACN,EAAD,UACI,eAAC,IAAD,CAAMQ,GAAE,gCAA2BF,EAAMG,aAAzC,UACI,qBAAKF,UAAU,iBAAiBG,IAAG,6CAAwCJ,EAAMG,YAAYE,MAAM,KAAK,GAArE,cAA6EL,EAAMG,YAAYE,MAAM,KAAK,IAAMC,IAAG,UAAKN,EAAMG,YAAX,UAAgCI,QATtL,eAUA,qCAAQP,EAAMiQ,KAAd,aAJHjQ,EAAMG,gBCgDZ+P,OArDf,YAAsD,EAAvBrJ,UAAuB,EAAZC,SAAa,IACnD,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,IAArC,mBAAOvE,EAAP,KAAe2N,EAAf,KACA,EAAgCpJ,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KAHkD,4CAKlD,4BAAA9F,EAAA,6DACI8F,GAAW,GADf,SAE2BR,KAF3B,OAEUW,EAFV,OAGIL,EAAaK,GACb6I,EAAU7I,GACVH,GAAW,GALf,4CALkD,sBAgClD,OAnBAI,qBAAU,YAbwC,mCAc9CC,KACD,IAEHD,qBAAU,WACN3F,QAAQC,IAAIW,KACb,CAACA,IAcA,qCACI,cAACjD,EAAD,CAAeU,UAAU,0CAAzB,SACI,uBAAOwH,KAAK,OAAOC,YAAY,gBAAgBC,SAdvC,SAACC,GACjB,IAAMwI,EAAiBpJ,EAAUqJ,QAAO,SAACrQ,GAErC,OADeU,KAAKC,MAAMX,EAAMY,UAChBC,KAAKiH,cAAcG,SAASL,EAAEC,OAAOtB,MAAMuB,kBAG/DqI,EAAUC,QAULlJ,EAAY,sBAAKjH,UAAU,0CAAf,UACT,cAAC8H,EAAA,EAAD,CAASC,UAAU,SADV,OAET,oBAAI/H,UAAU,gBAAd,SACI,qBAAKA,UAAU,MAAf,SACKqQ,OAAOC,KAAK/N,GAAQiD,KAAI,SAACe,GAAD,OAErB,cAAC,GAAD,CAAiDxG,MAAOwC,EAAOgE,IAA/D,UAAsBhE,EAAOgE,GAAKrG,yBC3B/CqQ,OAlBf,WAEI,MAA8BzJ,oBAAS,GAAvC,mBAAOF,EAAP,KAAkBC,EAAlB,KACA,EAAkCC,mBAAS,MAA3C,mBAAO+B,EAAP,KAAkB2H,EAAlB,KAIA,OAFA7O,QAAQC,IAAIiH,GAGR,qCACI,cAAC,GAAD,CAAqBjC,UAAWA,EAAWC,SAAUA,EAAUgC,UAAWA,EAAW2H,aAAcA,IAClG5J,EACG,cAAC,GAAD,CAAOA,UAAWA,EAAWC,SAAUA,EAAUgC,UAAWA,IAC1D,SCCH4H,I,GAAAA,GAZf,WAKI,OACI,8BACI,cAAC,GAAD,O,OCgDGC,I,GAAAA,GAzDf,YAAwC,IAAnB3Q,EAAkB,EAAlBA,MAAO+I,EAAW,EAAXA,QAElB6H,EAAYvR,IAAOwR,MAAV,0DAKf,EAA4B9J,mBAAS,IAArC,mBAAOhC,EAAP,KAAe+L,EAAf,KAPmC,4CASnC,8BAAAzP,EAAA,sEAEcgI,EAAO3I,KAAK4I,UACd,CACI,MAAS,CAAC,GAAD,OAAItJ,IACb,QAAW,CAAC,GAAD,OAAI+I,MAL/B,SAQiClE,GAAkBwE,GARnD,OAQc0H,EARd,OASQD,EAAUC,EAAWxM,MAAM,EAAG,IATtC,gDAUoB3C,QAAQC,IAAR,MAVpB,0DATmC,sBA4BnC,OANA0F,qBAAU,YAtByB,mCAuB/BkG,GACA7L,QAAQC,IAAIkD,KACb,IAIC,8BACI,eAAC6L,EAAD,CAAW3Q,UAAU,QAArB,UACI,gCACI,+BACI,oBAAI+Q,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,iCAGR,gCACKjM,EAAOU,KAAI,SAACT,GAAD,OACR,+BAEI,6BAAI,cAAC,IAAD,CAAM9E,GAAE,8BAAyB8E,EAAMG,OAAvC,SACCH,EAAMG,UAGX,6BAAKH,EAAMvE,QACX,6BAAKuE,EAAMI,uBCJxB6L,I,GAAAA,GAzCf,YAAwE,IAAlDjR,EAAiD,EAAjDA,MAAO+I,EAA0C,EAA1CA,QAAStE,EAAiC,EAAjCA,GAAIpB,EAA6B,EAA7BA,OAAe6N,GAAc,EAArBzQ,MAAqB,EAAdyQ,YAE/C1D,EAAanO,IAAOC,IAAV,2MAFmD,SAYpDqO,EAZoD,8EAYnE,WAAyB/F,GAAzB,SAAAvG,EAAA,+EAEcsH,GAAUf,EAAEC,OAAOtB,OAFjC,sDAKQ3E,QAAQC,IAAR,MALR,yDAZmE,sBAqBnE,OACI,qCACI,eAAC2L,EAAD,WACI,qBAAKvN,UAAU,iBAAiBG,IAAG,6CAAwCJ,EAAxC,cAAmD+I,GAAWzI,IAAG,UAAKmE,EAAL,YACpG,cAAC,GAAD,CAAOzE,MAAOA,EAAO+I,QAASmI,EAAWnI,GAAUtB,KAAM,iBAG7D,qBAAKxH,UAAU,gCAAf,SACI,0CACKoD,EAAOoC,KAAI,SAAClC,GACT,OACI,4BAAG,eAAC5D,EAAD,CAAW4G,MAAOhD,EAAMmG,SAAUnJ,QAASoN,EAA3C,UAAuDpK,EAAMC,IAAI9B,KAAK+B,SAAtE,yBCKhB0N,I,GAAAA,GApCf,YAAyE,IAAlDnR,EAAiD,EAAjDA,MAAO+I,EAA0C,EAA1CA,QAAStE,EAAiC,EAAjCA,GAAmByM,GAAc,EAA7B7N,OAA6B,EAArB5C,MAAqB,EAAdyQ,YAEhD1D,EAAanO,IAAOC,IAAV,2MAWhB,OACI,qCACI,sBAAKW,UAAU,4BAAf,UACI,qBAAKA,UAAU,iBAAiBG,IAAG,6CAAwCJ,EAAxC,cAAmD+I,GAAWzI,IAAG,UAAKmE,EAAL,YACpG,gCACI,kDAEA,cAAC,GAAD,CAAWzE,MAAOA,EAAO+I,QAASmI,EAAWnI,WAKrD,eAACyE,EAAD,WACI,cAAC,GAAD,CAAOxN,MAAOA,EAAO+I,QAASmI,EAAWnI,GAAUtB,KAAM,mBACzD,cAAC,GAAD,CAAOzH,MAAOA,EAAO+I,QAASmI,EAAWnI,GAAUtB,KAAM,yBCuG1D2J,OAzHf,WAKuB/R,IAAOC,IAAV,2MAAhB,IAUI+R,EAAY,CACZ,EAAG,YACH,EAAG,SACH,EAAG,OACH,EAAG,WAGDH,EAAa,SAAC1K,GAAU,OAAO6K,EAAU7K,IAEvC/B,EAAO6M,cAAP7M,GACR,EAAyBA,EAAGpE,MAAM,KAAlC,mBAAOL,EAAP,KAAc+I,EAAd,KAEA,EAA0BhC,mBAAS,MAAnC,mBAAOtG,EAAP,KAAcsM,EAAd,KACA,EAA0BhG,oBAAS,GAAnC,mBAAOqG,EAAP,KAAcC,EAAd,KACA,EAAgCtG,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,IAArC,mBAAO1D,EAAP,KAAekK,EAAf,KAEA,EAAsCxG,mBAAS,GAA/C,mBAAOwK,EAAP,KAAoBC,EAApB,KACMC,EAAY,SAACC,GACfF,EAAeE,IAlCJ,4CAyCf,gCAAArQ,EAAA,6DACI8F,GAAW,GADf,SAGQkG,GAAS,GAEHhE,EAAO3I,KAAK4I,UACd,CACI,MAAS,CAAC,GAAD,OAAItJ,IACb,QAAW,CAAC,GAAD,OAAIkR,EAAWnI,OAR1C,SAW+BzF,EAAyB+F,GAXxD,gBAWchG,EAXd,EAWcA,OACNkK,EAAUlK,GACV0J,EAAS1J,EAAO,GAAGG,IAAI9B,KAAK+B,UACF,OAAtBJ,EAAO,GAAG+F,SACViE,GAAS,GAfrB,kDAmBQA,GAAS,GACTzL,QAAQC,IAAR,MApBR,yBAuBQsF,GAAW,GAvBnB,8EAzCe,sBA0Ef,OANAI,qBAAU,YApEK,mCAqEXkG,KACD,IAKC,cAACrO,EAAD,UACK8H,EACG,sBAAKjH,UAAU,0CAAf,UACI,cAAC8H,EAAA,EAAD,CAASC,UAAU,SADvB,OAGAoF,EAAQ,sEAEJ,gCACI,sBAAKnN,UAAU,YAAY6L,MAAO,CAAE,mBAAoB,eAAxD,UACI,wBACI7L,UAA2B,IAAhBsR,EAAoB,mBAAqB,OACpDhR,QAAS,kBAAMkR,EAAU,IAF7B,0BAMA,wBACIxR,UAA2B,IAAhBsR,EAAoB,mBAAqB,OACpDhR,QAAS,kBAAMkR,EAAU,IAF7B,8BASJ,sBAAKxR,UAAU,eAAe6L,MAAO,CAAE,mBAAoB,eAA3D,UACI,qBACI7L,UAA2B,IAAhBsR,EAAoB,0BAA4B,UAAWzF,MAAO,CAAE,mBAAoB,eADvG,SAGI,cAAC,GAAD,CAAY9L,MAAOA,EAAO+I,QAASA,EAAStE,GAAIA,EAAIpB,OAAQA,EAAQ5C,MAAOA,EAAOyQ,WAAYA,MAGlG,qBACIjR,UAA2B,IAAhBsR,EAAoB,0BAA4B,UAAWzF,MAAO,CAAE,mBAAoB,eADvG,SAGI,cAAC,GAAD,CAAa9L,MAAOA,EAAO+I,QAASA,EAAStE,GAAIA,EAAIpB,OAAQA,EAAQ5C,MAAOA,EAAOyQ,WAAYA,e,UCuDhHS,GA/KI,SAACnJ,GAGhB,MAAwBzB,mBAAS,IAAjC,mBAAOrF,EAAP,KAAakQ,EAAb,KAEA,EAAgC7K,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAiCJ,mBAAS,GAA1C,mBAAO8K,EAAP,KAAoBC,EAApB,KAEIC,EAAS,EAKPC,EAAY,uCAAG,8BAAA3Q,EAAA,6DACXgB,EAAWuB,aAAaC,QAAQ,YADrB,SAEI5B,IAFJ,cAEXO,EAFW,QAGVC,SAAQ,SAACzC,GAAD,OAAWA,EAAMS,OAAST,EAAM0C,iBAAmBzB,KAAKC,IAAI,IAAK,IAAMmB,GAAUlB,QAAQ,MAHvF,kBAIVqB,GAJU,2CAAH,qDA2CZyP,EAAY,uCAAG,wCAAA5Q,EAAA,6DAEbK,EAAO,GAFM,SAGMI,IAHN,OAGXO,EAHW,OAIjBuB,aAAa8E,QAAQ,WAAYrG,GAJhB,cAOTC,EAAS,CACTP,OAAQ,CACJ,OAAU+B,EACV,KAAQ0E,EACR,SAAY,aACZ,UAAa,SAGT,wCAfC,SAgBU0J,IAAM3Q,IADjB,wCAC0Be,GAhBzB,OAgBPd,EAhBO,OAiBPC,EAASD,EAASE,KAClByQ,EAAU1Q,EAAOA,OACvBqC,EAASrC,EAAOqC,OAChBpC,EAAOA,EAAKuC,OAAOkO,GApBN,WAqBRrO,EArBQ,iDAsBVpC,GAtBU,4CAAH,qDA6BZ0Q,EAAY,uCAAG,WAAOC,EAAOC,GAAd,yBAAAjR,EAAA,sEAGPgB,EAAWuB,aAAaC,QAAQ,YAElCvB,EAAS,CACTP,OAAQ,CACJ,UAAa,GACb,kBAAqB,6CACrB,aAAgBsQ,EAAM5N,GACtB,SAAY,YACZ,UAAa,SAGT,wCAdC,SAeUyN,IAAM3Q,IADjB,wCAC0Be,GAfzB,OAePd,EAfO,OAgBPC,EAASD,EAASE,KAAKD,OAAO,GAAG8Q,YACjCvS,EAAQwB,EAASE,KAAKD,OAAO,GAAG+B,IAAI9B,KAAKkI,WAAWD,UAAUtJ,MAAM,OAAO,GAAGA,MAAM,OAAOmS,KAAK,KAChG/R,GAASgB,EAASR,KAAKC,IAAI,IAAK,IAAMmB,GAAUlB,QAAQ,GAC9D4Q,GAAUU,GAAYzS,GAAZ,OACVqS,EAAMlS,YAAcH,EACpBqS,EAAMK,SAAWjS,EACjB4R,EAAMM,YAAcC,EAAeP,EAAMlS,YAAamS,GACtDD,EAAMQ,YAAcR,EAAMM,aAAeN,EAAMK,UAAUvR,QAAQ,GAvBpD,kDA2BbS,QAAQC,IAAR,MACAwQ,EAAMlS,iBAAcK,EACpB6R,EAAMK,cAAWlS,EACjB6R,EAAMM,iBAAcnS,EACpB6R,EAAMQ,eAAYrS,EA/BL,iCAiCV,MAjCU,0DAAH,wDA2CZoS,EAAiB,SAACzS,EAAamS,GACjC,IACI,OAAQA,EAAUjC,QAAO,SAACrQ,GAAD,OAAWA,EAAMG,cAAgBA,KAAa,GAAGM,MAC5E,MAAOqS,GAEL,YADAlR,QAAQC,IAAIiR,KAKdC,EAAY,uCAAG,WAAOC,EAAQV,GAAf,mBAAAjR,EAAA,oEAEG2R,GAFH,+DAENX,EAFM,iBAMPD,EAAaC,EAAOC,GANb,uOAAH,wDAzIU,4CAoJ5B,8BAAAjR,EAAA,sEAEQ8F,GAAW,GAFnB,SAIgC6K,IAJhC,cAIcM,EAJd,gBAM6BL,IAN7B,cAMce,EANd,iBAOcD,EAAaC,EAAQV,GAPnC,QAQQV,EAAQoB,GACRlB,EAAUC,GACV5K,GAAW,GAVnB,kDAaQvF,QAAQC,IAAR,MAbR,2DApJ4B,sBA4K5B,OAJA0F,qBAAU,YAxKkB,mCAyKxBkG,KACD,IAEI,CAAE/L,KAAMA,EAAMwF,UAAWA,EAAW6K,OAAQF,ICvJxCoB,OAvBf,YAAyB,IAATvR,EAAQ,EAARA,KAKZ,OACI,cAAC,EAAD,CAAazB,UAAU,MAAvB,SACMyB,EAAKvB,kBAAiCK,IAAlBkB,EAAKgR,UACvB,gCACI,cAAC,EAAD,CAAkC1S,MAAO0B,GAAzC,UAAcA,EAAKvB,cACnB,gDAAmBuB,EAAKgR,SAAxB,OACA,oDAAuBhR,EAAKiR,eAC5B,4CAAejR,EAAKmR,mBC4BzBK,GAxCO,SAACF,GAEnB,MAAoCjM,mBAAS,GAA7C,mBAAOoM,EAAP,KAAmBC,EAAnB,KACA,EAA4BrM,mBAAS,GAArC,mBAAOsM,EAAP,KAAeC,EAAf,KACA,EAAsBvM,mBAAS,GAA/B,mBAAOwM,EAAP,KAAYC,EAAZ,KACA,EAAgCzM,oBAAS,GAAzC,mBAAkBI,GAAlB,WA+BA,OAJAI,qBAAU,YAvBY,SAACyL,GAEnB7L,GAAW,GAEX,IAAIsM,EAAc,EACdC,EAAY,EACZC,EAAU,EAEdX,EAAOvQ,SAAQ,SAAC4P,GACRA,EAAMK,UAAYL,EAAMM,kBAAmCnS,IAApB6R,EAAMQ,YAC7CY,IAAgBpB,EAAMK,SACtBgB,IAAcrB,EAAMM,YACpBgB,IAAYtB,EAAMQ,cAI1BO,EAAcK,GACdH,EAAUI,GACVF,EAAOG,GACPxM,GAAW,GAKXyM,CAAcZ,KACf,IAEI,CAAEG,WAAYA,EAAYE,OAAQA,EAAQE,IAAKA,IChB3CM,OApBf,YAAyC,IAAnBb,EAAkB,EAAlBA,OAAQjB,EAAU,EAAVA,OAC1B,EAA+CmB,GAAcF,GAArDG,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,OAAQE,EAA5B,EAA4BA,IAAKrM,EAAjC,EAAiCA,UAEjC,OACI,8BACKA,EAAY,sBAAKjH,UAAU,0CAAf,UACT,cAAC8H,EAAA,EAAD,CAASC,UAAU,SADV,OAET,qDACkBmL,EAAWhS,QAAQ,GADrC,aAEakS,EAAOlS,QAAQ,GAF5B,WAGWoS,EAAIpS,QAAQ,GAHvB,YAIc4Q,EAAO5Q,QAAQ,GAJ7B,8BAK8B,IAAS4Q,EAAS,UAAU5Q,QAAQ,SCwDnE2S,OA9Df,YAAiC,IAAZtL,EAAW,EAAXA,QA0BjB,EAA+CmJ,GAAWnJ,GAA5CuL,EAAd,EAAQrS,KAAiBwF,EAAzB,EAAyBA,UAAW6K,EAApC,EAAoCA,OAEpC,EAAsChL,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAUA,OACI,qCACI,cAAC9H,EAAD,CAAeU,UAAU,0CAAzB,SACI,uBAAOwH,KAAK,OAAOC,YAAY,iBAAiBC,SATxC,SAACC,GACjBP,EAAeO,EAAEC,OAAOtB,MAAMuB,oBAUzBZ,EAAY,sBAAKjH,UAAU,0CAAf,UACT,cAAC8H,EAAA,EAAD,CAASC,UAAU,SADV,OAET,qCACI,cAAC,GAAD,CAAYgL,OAAQe,EAAWhC,OAAQA,IACvC,oBAAI9R,UAAU,gBAAd,SACI,qBAAKA,UAAU,MAAf,SACK8T,EAAUtO,KAAI,SAACuO,GAAD,OAEXA,EAAKpT,SAASC,KAAKiH,cAAcG,SAASb,IAAgB,cAAC,GAAD,CAAM1F,KAAMsS,kBC9CvFC,OAVf,WAEI,IAAYzL,EAAY8I,cAAhB7M,GACR,OACI,mCACI,cAAC,GAAD,CAAW+D,QAASA,O,cCOhC0L,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,UACC,cAAC,GAAD,UACC,eAAChV,EAAD,WACC,cAAC,GAAD,IACA,cAAC,IAAD,CAAOiV,OAAK,EAACC,KAAK,iBAAlB,SACC,cAAC,IAAD,CAAUpU,GAAG,4BAEd,cAAC,IAAD,CAAOoU,KAAK,wBAAZ,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOA,KAAK,yBAAZ,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOA,KAAK,2BAAZ,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOA,KAAK,4BAAZ,SACC,cAAC,GAAD,MAED,cAAC,IAAD,CAAOA,KAAK,0BAAZ,SACC,cAAC,GAAD,eAMLC,SAASC,eAAe,W","file":"static/js/main.2e19b851.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nexport const BackgroundWrapper = styled.div`\r\n  background-image: linear-gradient(to right, rgb(50, 50, 50) 10%, transparent), linear-gradient(to top, rgb(2, 2, 2) 1%, transparent), url(https://blog.godsunchained.com/wp-content/uploads/2019/12/atlas_header.jpg);\r\n  background-position: left top;\r\n  background-repeat: no-repeat;\r\n  color:white;\r\n\r\n`\r\n\r\nexport const Parallax = styled.div`\r\nbackground-image: linear-gradient(to right, rgb(50, 50, 50) 10%, transparent), linear-gradient(to top, rgb(2, 2, 2) 1%, transparent), url(https://blog.godsunchained.com/wp-content/uploads/2019/12/atlas_header.jpg);\r\nbackground-attachment: fixed;\r\nbackground-position: center;\r\nbackground-repeat: no-repeat;\r\nbackground-size: cover;\r\ncolor:white;\r\nmin-height: 900px;\r\nmargin-top:75px;\r\nwidth:100%;\r\n\r\n`\r\n\r\nexport const SearchWrapper = styled.div`\r\n  display:flex;\r\n  justify-content:center;\r\n  padding-top:10px;\r\n  \r\n`\r\n\r\nexport const CollectionWrapper = styled.div`\r\n background: rgb(176,191,201);\r\n background: linear-gradient(90deg, rgba(176,191,201,1) 0%, rgba(115,125,158,1) 21%, rgba(113,110,163,1) 51%, rgba(56,47,115,1) 79%, rgba(21,9,78,1) 100%);\r\n`\r\n\r\nexport const CardWrapper = styled.div`\r\n  display:flex;\r\n  flex-direction: row;\r\n  margin:2px;\r\n  padding:2px;\r\n  border-radius:5px;\r\n  justify-content:center;\r\n  background:transparent;\r\n\r\n`\r\n\r\nexport const InfoWrapper = styled.div`\r\n  padding-right:10px;\r\n  padding-left:10px;\r\n\r\n  display:flex;\r\n  justify-content:space-between\r\n`\r\n\r\nexport const ImageWrapper = styled.div`\r\ntransition: all .2s ease-in-out;\r\nborder-radius: 10px;\r\n&:hover{\r\n    transform:scale(1.1);\r\n}\r\n`\r\n\r\nexport const BuyButton = styled.button`\r\n  background-color: green;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const SellButton = styled.button`\r\n  background-color: red;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`;\r\n\r\nexport const DefaultButton = styled.button`\r\nbackground-color: grey;\r\n  width: 90px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  margin-left:10px;\r\n`\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  margin-top:10%;\r\n  display:flex;\r\n  justify-content : center;\r\n`","import { ImageWrapper, CardWrapper, InfoWrapper } from '../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Item({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <CardWrapper className=\"col\">\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                    </Link>\r\n                </ImageWrapper>\r\n                {proto.price !== undefined &&\r\n                    <InfoWrapper>\r\n                        <span>\r\n                            {JSON.parse(proto.metadata).name}\r\n                        </span>\r\n                        <span>\r\n                            {proto.price}$\r\n                        </span>\r\n                    </InfoWrapper>\r\n                }\r\n\r\n            </li>\r\n\r\n\r\n        </CardWrapper>\r\n    )\r\n}\r\n\r\nexport default Item","import { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport Axios from 'axios';\r\nimport { createPortal } from 'react-dom';\r\n\r\n//api endpoint de immuX\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n//adresse ETH de la collection GodsUnchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\n\r\n\r\n/**\r\n * \r\n * @param {*} price \r\n * @returns {string} La conversion du prix en Gwei en prix en eth\r\n */\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\nexport const getHistoricalEthPrice = async () => {\r\n    let url = 'https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=max&interval=daily'\r\n    try {\r\n        const response = await Axios.get(url);\r\n        const result = response.data;\r\n        return result.prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns {*} le prix de l'eth en USD\r\n */\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * @returns {string}  une liste contenant tous les protos , metadata et leurs prix minimum\r\n */\r\nexport async function getAllProtos() {\r\n\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ethPrice = await getEthPrice();\r\n    let config = {\r\n        headers: { 'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s' },\r\n        params: {\r\n            'tokenAddress': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'\r\n        },\r\n    }\r\n    let url = 'https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders'\r\n    const response = await Axios(url, config)\r\n    const protos = response.data\r\n    protos.forEach((proto) => proto.price = (proto.takerAssetAmount * ethPrice * Math.pow(10, -18)).toFixed(2))\r\n    return protos;\r\n\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns les 5 ordres de ventes les moins chers\r\n */\r\nexport async function getCheapestSellOrders(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 5,\r\n        status: 'active',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'buy_quantity',\r\n        direction: 'asc'\r\n    });\r\n    return { orders: ordersRequest.result };\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * Convertit le prix des ordres retours de getCheapestSellOrders en USD\r\n * @returns les 5 ordres de vente les moins chers, prix converti en USD\r\n */\r\nexport async function getCheapestUSDSellOrders(metadata) {\r\n    const { orders } = await getCheapestSellOrders(metadata)\r\n    const ethPrice = await getEthPrice();\r\n    orders.forEach((order) => {\r\n        order.buy.data.quantity = (order.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n    })\r\n    return { orders: orders }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @param {*} min_date à partir de quand on récupère les données (1 mois max)\r\n * @returns liste des ventes triées par updated_timestamp croissant\r\n */\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp CROISSANT pour avoir les ordres dans l'ordre chronologique\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        //on trie la liste selon le updated_timestamp croissant\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata au format JSON du sell_token\r\n * @returns \r\n */\r\nexport async function getLastTrades(metadata) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    //Requête par timestamp DECROISSANT pour avoir les derniers ordres publiés\r\n    const ordersRequest = await client.getOrders({\r\n        page_size: 30,\r\n        status: 'filled',\r\n        sell_token_address: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n        sell_metadata: metadata,\r\n        order_by: 'timestamp',\r\n        direction: 'desc'\r\n    });\r\n    //trier par updated_timestamp décroissant ()\r\n    ordersRequest.result.sort((a, b) => (b.updated_timestamp.localeCompare(a.updated_timestamp)));\r\n    return ordersRequest.result.slice(0, 5);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} id \r\n * @returns infos sur l'asset en question : {id, owner, name, metadata, creation time...}\r\n */\r\nexport async function getAssetInfo(id) {\r\n\r\n    let url = `https://api.x.immutable.com/v1/assets/${COLLECTION_ADDRESS}/${id}`\r\n    const response = await Axios(url)\r\n    const infos = response.data\r\n    return infos.user\r\n}\r\nexport async function getLastTradesData(metadata) {\r\n    const ethPrice = await getEthPrice();\r\n\r\n    let datas = [];\r\n    try {\r\n        const trades = await getLastTrades(metadata);\r\n        for (const trade of trades) {\r\n            let tokenID = trade.sell.data.id;\r\n            let owner = await getAssetInfo(tokenID)\r\n            let price = (trade.buy.data.quantity * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            datas = datas.concat({ tokenID: tokenID, owner: owner, price: price, uptime: (Date.parse(trade.updated_timestamp) - Date.parse(trade.timestamp)) / 1000 })\r\n        }\r\n\r\n        return datas;\r\n    } catch (err) { console.log(err) }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getAvgDailyPrice(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            let unix_time = time.setUTCHours(0, 0, 0, 0)\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1), unix_time });\r\n        });\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date date à partir de laquelle on récupère les données (30j max)\r\n * @returns liste contenant les infos liées à chaque ordre de vente rempli.\r\n */\r\nexport async function getAllOrdersHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            let unix_time = time.setUTCHours(0, 0, 0, 0)\r\n            price = (+toEthPrice(order.buy.data.quantity))\r\n            price.toFixed(6)\r\n            let dict = {\r\n                time: f_time,\r\n                data: {\r\n                    price: price,\r\n                    volume: 0,\r\n                    unix_time: unix_time\r\n                },\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        });\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns liste contenant les infos de chaque carte actuellement en promotion\r\n */\r\nexport const getDiscounts = async () => {\r\n    let url = 'https://gumarkets.freeboxos.fr:5000/discounts'\r\n    const response = await Axios(url)\r\n    const result = response.data\r\n    return result;\r\n\r\n}\r\n\r\n\r\ngetCheapestUSDSellOrders();","import { useState, useEffect } from 'react'\r\nimport Item from './Item'\r\nimport '../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\nimport { SearchWrapper, Parallax } from '../styles/GlobalStyle'\r\nimport styled from 'styled-components'\r\n\r\nfunction Collection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [searchParam, setSearchParam] = useState(\"\");\r\n\r\n\r\n\r\n    async function initPage() {\r\n        try {\r\n            setLoading(true)\r\n            const myProtos = await getAllProtos();\r\n            setAllProtos(myProtos)\r\n            console.log(myProtos)\r\n            setLoading(false)\r\n        } catch (err) { console.log(err) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setSearchParam(e.target.value.toLowerCase())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SearchWrapper className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a card\" onChange={handleInput} />\r\n            </SearchWrapper>\r\n            {isLoading ?\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <Spinner animation=\"grow\" />\r\n                </div>\r\n                :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {allProtos.map((proto) => {\r\n\r\n                            return (JSON.parse(proto.metadata).name !== undefined && JSON.parse(proto.metadata).name.toLowerCase().includes(searchParam) && <Item key={`${proto.token_proto}`} proto={proto} />)\r\n\r\n                        }\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Collection","//ImmutableXConnection.js\r\n//Sample Immutable X functions for collection interaction\r\n\r\nimport { Link } from '@imtbl/imx-link-sdk';\r\nimport { ImmutableXClient } from '@imtbl/imx-link-lib';\r\nimport { ERC721TokenType, ETHTokenType } from '@imtbl/imx-link-types';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst linkAddress = 'https://link.x.immutable.com';\r\nconst apiAddress = 'https://api.x.immutable.com/v1';\r\n// Ropsten Testnet\r\n//const linkAddress = 'https://link.uat.x.immutable.com';\r\n//const apiAddress = 'https://api.uat.x.immutable.com/v1';\r\n\r\n//The token address for the collection to be monitored. Currently set to Gods Unchained\r\nconst COLLECTION_ADDRESS = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c';\r\n\r\nconst link = new Link(linkAddress);\r\n\r\n\r\nconst WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nconst STARK_PUBLIC_KEY = 'STARK_PUBLIC_KEY';\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// User Account Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n//Creates or logs a user into their Immutable X account via web3 wallet\r\nexport async function setupAndLogin() {\r\n    const { address, starkPublicKey } = await link.setup({});\r\n    localStorage.setItem(WALLET_ADDRESS, address);\r\n    localStorage.setItem(STARK_PUBLIC_KEY, starkPublicKey);\r\n}\r\n\r\n//Remove the local storage wallet address\r\nexport function logout() {\r\n    localStorage.removeItem('WALLET_ADDRESS');\r\n}\r\n\r\n//Get the user balances\r\nexport async function getUserBalances() {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    return await client.getBalances({ user: address });\r\n}\r\n\r\n//Deposits ETH into Immutable X\r\nexport async function depositEth(amountInEth) {\r\n    await link.deposit({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Starts the withdrawal process from Immutable X\r\nexport async function prepareWithdrawal(amountInEth) {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH,\r\n        amount: amountInEth\r\n    });\r\n}\r\n\r\n//Finishes the withdrawal process from Immutable X\r\n//Must wait for user balance to have ETH in the withdrawable state \r\nexport async function completeWithdrawal() {\r\n    await link.prepareWithdrawal({\r\n        type: ETHTokenType.ETH\r\n    });\r\n}\r\n\r\n//Show user history\r\nexport async function showUserHistory() {\r\n    link.history({});\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////// Asset Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the user's assets\r\n * @param {string} assetCursor - optional cursor parameter \r\n * @returns Object containing the assets and a cursor if more assets remain to be retrieved\r\n */\r\nexport async function getUserAssets(assetCursor) {\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    const assetsRequest = await client.getAssets({ user: address, cursor: assetCursor, status: 'imx', collection: COLLECTION_ADDRESS });\r\n    return { assets: assetsRequest.result, cursor: assetsRequest.cursor };\r\n}\r\n\r\n\r\nexport async function getAllUserAssets() {\r\n    let assetCursor;\r\n    let assets = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let assetRequest = await client.getAssets({ user: address, status: 'imx', collection: COLLECTION_ADDRESS, sell_orders: true });\r\n            assets = assets.concat(assetRequest.result);\r\n            assetCursor = assetRequest.cursor;\r\n\r\n        } while (assetCursor);\r\n\r\n        for (let asset of assets) {\r\n            asset.isListed = false;\r\n            if (asset.orders?.sell_orders?.length > 0) {\r\n                asset.isListed = true;\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return assets;\r\n    }\r\n\r\n}\r\n\r\n//Opens the Link SDK popup to sell an asset as the specified price\r\nexport async function sellAsset(asset, priceInEth) {\r\n    let sellParams = { amount: priceInEth, tokenId: asset.id, tokenAddress: asset.token_address };\r\n    //Throws an error if not successful\r\n    await link.sell(sellParams);\r\n}\r\n\r\n//Transfers an asset to another address\r\nexport async function transferERC721(asset, addressToSendTo) {\r\n    await link.transfer({\r\n        type: ERC721TokenType.ERC721,\r\n        tokenId: asset.id,\r\n        tokenAddress: asset.token_address,\r\n        to: addressToSendTo\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n///////////////////////// Marketplace Management /////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Get the cheapest active orders for the collection\r\n * @param {*} ordersCursor - optional cursor parameter \r\n * @param {*} tokenName - optional token name to filter on \r\n * @param {*} metadata - optional JSON string metadata to filter on \r\n * @returns Object containing the cheapest orders and a cursor if more orders remain\r\n */\r\nexport async function getCheapestSellOrders(pageSize, ordersCursor, metadata) {\r\n    try {\r\n        const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n        const ordersRequest = await client.getOrders({\r\n            page_size: pageSize,\r\n            cursor: ordersCursor,\r\n            status: 'active',\r\n            sell_token_address: COLLECTION_ADDRESS,\r\n            sell_metadata: metadata,\r\n            order_by: 'buy_quantity',\r\n            direction: 'asc'\r\n        });\r\n        return { orders: ordersRequest.result, cursor: ordersRequest.cursor };\r\n    } catch (err) {\r\n        console.log(err)\r\n\r\n    }\r\n}\r\n\r\nexport async function getOrdersHistory(metadata, min_date) {\r\n    let ordersCursors;\r\n    let orders = [];\r\n    const client = await ImmutableXClient.build({ publicApiUrl: apiAddress });\r\n    const address = localStorage.getItem('WALLET_ADDRESS');\r\n    try {\r\n        do {\r\n            let ordersRequest = await client.getOrders({\r\n                page_size: 200,\r\n                cursor: ordersCursors,\r\n                status: 'filled',\r\n                sell_token_address: COLLECTION_ADDRESS,\r\n                sell_metadata: metadata,\r\n                order_by: 'timestamp',\r\n                direction: 'asc',\r\n                min_timestamp: min_date\r\n\r\n            });\r\n            orders = orders.concat(ordersRequest.result);\r\n            ordersCursors = ordersRequest.cursor;\r\n\r\n\r\n        } while (ordersCursors);\r\n        orders.sort((a, b) => (a.updated_timestamp.localeCompare(b.updated_timestamp)));\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        console.log(orders)\r\n        return orders;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} metadata \r\n * @param {*} min_date \r\n * @returns liste contenant pour chaque jour le prix moyen et le volume total\r\n */\r\nexport async function getPriceHistory(metadata, min_date) {\r\n    let h_prices = [];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let map = new Map();\r\n    let volume;\r\n    let price;\r\n    try {\r\n        const orders = await getOrdersHistory(metadata, min_date);\r\n        console.log(orders)\r\n        orders.forEach((order) => {\r\n\r\n            let unixtime = Date.parse(order.updated_timestamp)\r\n            let time = new Date(unixtime)\r\n            let f_time = time.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })\r\n            if (map.has(f_time)) {\r\n                const res = map.get(f_time);\r\n                price = (+res.price + +toEthPrice(order.buy.data.quantity))\r\n                price /= 2\r\n                volume = res.volume\r\n            }\r\n            else {\r\n                volume = 0;\r\n                price = (+toEthPrice(order.buy.data.quantity))\r\n\r\n            }\r\n            price.toFixed(6)\r\n\r\n            map.set(f_time, { price: price, volume: (volume + 1) });\r\n        });\r\n        console.log(map)\r\n        map.forEach((value, key) => {\r\n            let dict = {\r\n                time: key,\r\n                data: value\r\n            }\r\n            h_prices = h_prices.concat(dict)\r\n        })\r\n        return h_prices;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n//Opens the Link SDK popup to complete an order\r\nexport async function fillOrder(order) {\r\n    await link.buy({ orderId: order });\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////","import Axios from \"axios\"\r\n\r\nexport const fetchProtoCollection = async () => {\r\n    let url = 'https://api.godsunchained.com/v0/proto?perPage=2000'\r\n    const response = await Axios(url)\r\n    const assets = response.data.records\r\n    return assets;\r\n\r\n}\r\n\r\n\r\n\r\nexport const getEthPrice = async () => {\r\n    let url = 'https://min-api.cryptocompare.com/data/price'\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    \"fsym\": \"ETH\",\r\n                    \"tsyms\": \"USD\",\r\n                }\r\n            });\r\n        const result = response.data;\r\n        return result.USD;\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\nexport const fetchBestPrice = async (popupCard, quality) => {\r\n    var result = null\r\n    var bestOrder = {\r\n        minPrice: Number.MAX_SAFE_INTEGER,\r\n        orderID: null\r\n    };\r\n    let url = 'https://api.x.immutable.com/v1/orders'\r\n    const json = JSON.stringify(\r\n        {\r\n            \"proto\": [`${popupCard.id}`],\r\n            \"quality\": [`${quality}`]\r\n        }\r\n    );\r\n    try {\r\n        const response = await Axios.get(url,\r\n            {\r\n                params:\r\n                {\r\n                    sell_metadata: json,\r\n                    status: 'active',\r\n                    order_by: 'buy_quantity',\r\n                    direction: 'asc',\r\n\r\n                }\r\n            })\r\n        result = response.data.result\r\n        result.map((order) => {\r\n\r\n            let quantity = order.buy.data.quantity\r\n            let decimals = order.buy.data.decimals\r\n            let currentPrice = (quantity * Math.pow(10, -decimals)).toFixed(6)\r\n            let currentID = order.order_id\r\n            if (bestOrder.minPrice > currentPrice) {\r\n                bestOrder.minPrice = currentPrice;\r\n                bestOrder.orderID = currentID;\r\n            }\r\n        })\r\n\r\n        var image_url = result[0].sell.data.properties.image_url;\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    finally {\r\n        return {\r\n            result,\r\n            bestOrder,\r\n            image_url\r\n        };\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const toEthPrice = (price) => {\r\n    return (price * Math.pow(10, -18)).toFixed(6);\r\n\r\n}\r\n\r\n","import {\r\n    ComposedChart,\r\n    Line,\r\n    Area,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    Scatter,\r\n    ResponsiveContainer,\r\n    Label,\r\n} from 'recharts';\r\nimport { getEthPrice, getHistoricalEthPrice } from '../utils/apiCalls.js';\r\nimport { getPriceHistory } from '../utils/ImmutableXConnection.js'\r\nimport { getAllOrdersHistory, getAvgDailyPrice } from '../utils/apiCalls.js';\r\nimport { useState, useEffect } from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { SpinnerWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Chart({ proto, quality, type }) {\r\n    const [history, setHistory] = useState([])\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const Init = async (proto, quality, min_date, type) => {\r\n        setLoading(true)\r\n        //get price history\r\n        const json = JSON.stringify(\r\n            {\r\n                \"proto\": [`${proto}`],\r\n                \"quality\": [`${quality}`]\r\n            }\r\n        );\r\n        const ethPriceHistory = await getHistoricalEthPrice()\r\n        const ethcurrentPrice = await getEthPrice();\r\n        let ethprice;\r\n\r\n        if (type === \"month-avg\") {\r\n            const hprices = await getAvgDailyPrice(json, min_date)\r\n            hprices.forEach((elem) => {\r\n                let found = ethPriceHistory.find(element => element[0] === elem.data.unix_time)\r\n                ethprice = found === undefined ? ethcurrentPrice : found[1]\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            })\r\n            console.log(hprices)\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"month-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach((elem) => {\r\n                let found = ethPriceHistory.find(element => element[0] === elem.data.unix_time)\r\n                ethprice = found === undefined ? ethcurrentPrice : found[1]\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            })\r\n            setHistory(hprices)\r\n        }\r\n        else if (type === \"week-detailed\") {\r\n            const hprices = await getAllOrdersHistory(json, min_date)\r\n            hprices.forEach(async (elem) => {\r\n                let found = ethPriceHistory.find(element => element[0] === elem.data.unix_time)\r\n                ethprice = found === undefined ? ethcurrentPrice : found[1]\r\n                elem.data.price = +(elem.data.price * ethprice).toFixed(2)\r\n            })\r\n            setHistory(hprices)\r\n        }\r\n\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let min_date;\r\n        switch (type) {\r\n            case (\"month-avg\"):\r\n                min_date = new Date()\r\n                min_date.setMonth(min_date.getMonth() - 1)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            case \"week-detailed\":\r\n                min_date = new Date()\r\n                min_date.setTime(min_date.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            case (\"month-detailed\"):\r\n                min_date = new Date()\r\n                min_date.setMonth(min_date.getMonth() - 1)\r\n                min_date = min_date.toISOString();\r\n                break;\r\n            default:\r\n                console.log(\"===DEFAULT===\", type)\r\n                min_date = undefined;\r\n        }\r\n        Init(proto, quality, min_date, type)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n\r\n            {isLoading ?\r\n                <SpinnerWrapper>\r\n                    <Spinner animation=\"grow\" /> </SpinnerWrapper>\r\n                :\r\n                <div className=\"d-flex align-items-center\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={400}\r\n                        data={history}\r\n                        margin={{\r\n                            top: 20,\r\n                            right: 20,\r\n                            bottom: 20,\r\n                            left: 20,\r\n                        }}\r\n                    >\r\n\r\n                        <XAxis dataKey=\"time\" stroke=\"#F2F2F3\" />\r\n                        <YAxis yAxisId=\"left\" name=\"price\" dataKey=\"data.price\" stroke=\"#D6DBDF\">\r\n                            <Label angle={270} position='left' style={{ textAnchor: 'middle', fill: \"#F4F6F7\" }} >\r\n                                USD price\r\n                            </Label>\r\n                        </YAxis>\r\n                        <YAxis yAxisId=\"right\" name=\"volume\" dataKey=\"data.volume\" orientation=\"right\" domain={[0, dataMax => (dataMax * 5)]} stroke=\"#D6DBDF\">\r\n                            <Label angle={90} position='right' style={{ textAnchor: 'middle', fill: \"#F4F6F7\" }}>\r\n                                Volume\r\n                            </Label>\r\n                        </YAxis>\r\n                        <Tooltip contentStyle={{ \"background-color\": \"rgba(0, 129, 189, 0.2)\" }} wrapperStyle={{ color: \"white\" }} itemStyle={{ color: \"white\" }} />\r\n                        <Legend />\r\n                        <Line yAxisId=\"left\" dot={false} name=\"price\" type=\"monotone\" dataKey=\"data.price\" stroke=\"#A9DFBF \" />\r\n                        <Bar yAxisId=\"right\" name=\"volume\" dataKey=\"data.volume\" barSize={5} fill=\"#AF7AC5\" />\r\n\r\n                    </ComposedChart>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import '../styles/Popup.css'\r\nimport Axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport { sellAsset, fillOrder, getOrdersHistory, getCheapestSellOrders, getPriceHistory, toEthPrice } from '../utils/ImmutableXConnection.js'\r\nimport { fetchBestPrice, getEthPrice } from '../utils/getProtoCollection'\r\nimport { BuyButton, SellButton } from '../styles/GlobalStyle'\r\nimport Chart from './Chart'\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nfunction Popup({ showPopup, setPopup, popupCard }) {\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [orderID, setOrderID] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [quality, setQuality] = useState(\"Meteorite\")\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [ethPrice, setEthPrice] = useState(null);\r\n    const [orders, setOrders] = useState([])\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n  display:flex;\r\n  flex-direction:row;\r\n  justify-content : center;\r\n  align-items:center;\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const { result, bestOrder, image_url } = await fetchBestPrice(popupCard, quality);\r\n            console.log(result, bestOrder, image_url)\r\n            setOrders(result.slice(0, 5))\r\n            setPrice(bestOrder.minPrice)\r\n            setOrderID(bestOrder.orderID)\r\n            const aPrice = await getEthPrice();\r\n            setEthPrice(aPrice);\r\n            setImage(image_url)\r\n            if (bestOrder.orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        init(popupCard, quality);\r\n    }, [quality])\r\n\r\n    const handleClose = () => {\r\n        setPopup(!showPopup)\r\n\r\n    }\r\n\r\n    const handleMeteorite = () => {\r\n        setQuality(\"Meteorite\")\r\n\r\n    }\r\n    const handleShadow = () => {\r\n        setQuality(\"Shadow\")\r\n\r\n    }\r\n    const handleGold = () => {\r\n        setQuality(\"Gold\")\r\n\r\n    }\r\n\r\n    const handleDiamond = () => {\r\n        setQuality(\"Diamond\")\r\n    }\r\n\r\n    const handleSell = () => {\r\n        sellAsset('0x843279e9ee4e64ff7a4d8743df80e5a914ff8053ee40a15b6d7b6a5b195e8375', '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c', 0.01)\r\n    }\r\n\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={showPopup} onHide={handleClose} dialogClassName=\"modal-80w\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{popupCard.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {isLoading ?\r\n                        <div className=\"container d-flex justify-content-center\">\r\n                            <Spinner animation=\"grow\" /> </div>\r\n                        :\r\n                        error ? <h5>this card is not available for trade</h5> :\r\n                            <div>\r\n                                <p>Quality : {quality}</p>\r\n                                <p>Price : {price} ETH - {(price * ethPrice).toFixed(2)} USD</p>\r\n                                <Pcontainer>\r\n                                    <img src={image} alt={popupCard.id}></img>\r\n                                    <Chart proto={popupCard.id} quality={quality} />\r\n                                </Pcontainer>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <p>For sale:\r\n                                        {orders.map((order) => {\r\n                                            const order_ethprice = toEthPrice(order.buy.data.quantity)\r\n                                            const order_usdprice = (order_ethprice * ethPrice).toFixed(2)\r\n                                            return (\r\n                                                <p><BuyButton value={order.order_id} onClick={handleBuy}>{order_usdprice} USD </BuyButton> : {order_ethprice} ETH</p>\r\n                                            )\r\n                                        }\r\n                                        )}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                    }\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleMeteorite}>\r\n                        Meteorite\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleShadow}>\r\n                        Shadow\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={handleGold}>\r\n                        Gold\r\n                    </Button>\r\n                    <Button variant=\"link\" onClick={handleDiamond}>\r\n                        Diamond\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Popup","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\n\r\nfunction Home() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Collection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} loadCollection={fetchProtoCollection} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { useState, createContext } from 'react'\r\n\r\nexport const LoggedContext = createContext()\r\n\r\nexport const LoggedProvider = ({ children }) => {\r\n    const [logged, setLogged] = useState(localStorage.getItem('WALLET_ADDRESS') !== null)\r\n\r\n    return (\r\n        <LoggedContext.Provider value={{ logged, setLogged }}>\r\n            {children}\r\n        </LoggedContext.Provider>\r\n    )\r\n}","import { setupAndLogin } from '../utils/ImmutableXConnection'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useEffect, useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router'\r\n\r\nimport OwnedCollection from '../components/OwnedCollection'\r\nimport OwnedPopup from '../components/OwnedPopup'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nfunction Account() {\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [address, setAddress] = useState('')\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n\r\n\r\n\r\n    async function logAccount() {\r\n        setLoading(true)\r\n        if (!logged) {\r\n            try {\r\n                await setupAndLogin()\r\n                setLogged(true)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n                setLogged(false)\r\n            }\r\n        }\r\n        setAddress(localStorage.getItem('WALLET_ADDRESS'))\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        logAccount();\r\n    }, [])\r\n\r\n\r\n    // return (\r\n    //     <div className=\"container\">\r\n    //         <OwnedCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} user={address} />\r\n    //         {showPopup ?\r\n    //             <OwnedPopup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n    //             : null}\r\n    //     </div>\r\n    // )\r\n    return (\r\n        <>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                < Spinner animation=\"grow\" /> </div> :\r\n                <>\r\n                    <Redirect to={'/godsunchained/user/' + localStorage.getItem('WALLET_ADDRESS')} />\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Account","export default __webpack_public_path__ + \"static/media/logo.aac3612d.png\";","import '../styles/Header.css'\r\nimport styled from 'styled-components'\r\nimport Logo from '../assets/logo.png'\r\nimport { Link } from 'react-router-dom'\r\nimport { setupAndLogin, logout } from '../utils/ImmutableXConnection'\r\nimport { useContext } from 'react'\r\nimport { LoggedContext } from '../utils/context'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DefaultButton } from '../styles/GlobalStyle'\r\nimport { useState } from 'react'\r\n\r\nfunction Header() {\r\n\r\n\r\n    const NavContainer = styled.nav`\r\n  padding: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n    const StyledLink = styled(Link)`\r\n  padding: 10px 15px;\r\n  color: #c4fffc;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  text-align: center;\r\n`\r\n\r\n    const HeaderWrapper = styled.nav`\r\n    background-image: linear-gradient(to right, rgb(50, 50, 50) 10%, transparent), linear-gradient(to top, rgb(2, 2, 2) 1%, transparent), url(https://blog.godsunchained.com/wp-content/uploads/2019/12/atlas_header.jpg);\r\n    background-attachment: fixed;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    display:flex;\r\n    align-items: center;\r\n    max-height: 75px;\r\n    justify-content: space-between;\r\n    position:fixed;\r\nz-index:100;\r\n    top: 0;\r\n    width: 100%\r\n    \r\n`\r\n\r\n    const { logged, setLogged } = useContext(LoggedContext);\r\n    const [search, setSearch] = useState('')\r\n    const history = useHistory();\r\n\r\n    async function handleConnect() {\r\n        if (logged) {\r\n            alert(\"user already connected\")\r\n        }\r\n        else {\r\n            async function logAccount() {\r\n                try {\r\n                    await setupAndLogin()\r\n                    setLogged(true)\r\n                }\r\n                catch (err) {\r\n                    console.log(err)\r\n                    setLogged(false)\r\n                }\r\n            }\r\n            logAccount();\r\n        }\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        if (logged) {\r\n            logout();\r\n            setLogged(false)\r\n            let path = `/browse`;\r\n            history.push(path);\r\n            alert(\"user disconnecterd\")\r\n        }\r\n        else {\r\n            alert(\"user not logged in\")\r\n        }\r\n    }\r\n\r\n    const handleInput = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <HeaderWrapper>\r\n            <div>\r\n                <img src={Logo} className=\"mainLogo\" alt=\"mainLogo\" />\r\n            </div>\r\n            <div>\r\n\r\n                <div className=\" d-flex justify-content-center\">\r\n                    <input type=\"text\" placeholder=\"Enter eth address\" onChange={handleInput} />\r\n                    <StyledLink className=\"link\" to={`/godsunchained/user/${search}`} >Search user</StyledLink>\r\n                </div>\r\n\r\n            </div>\r\n            <NavContainer>\r\n                {logged ? <DefaultButton onClick={handleDisconnect}>Disconnect</DefaultButton> : (<DefaultButton onClick={handleConnect}>Connect</DefaultButton>)}\r\n                <StyledLink className=\"link\" to=\"/godsunchained/browse\" >Browse Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/account\">Your Cards</StyledLink>\r\n                <StyledLink className=\"link\" to=\"/godsunchained/discounts\">Discounts</StyledLink>\r\n            </NavContainer>\r\n        </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header","import { ImageWrapper } from '../../styles/GlobalStyle'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction DiscountItem({ proto }) {\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <li key={proto.token_proto}>\r\n                <ImageWrapper>\r\n                    <Link to={`/godsunchained/protos/${proto.token_proto}`}>\r\n                        <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto.token_proto.split('-')[0]}&q=${proto.token_proto.split('-')[1]}`} alt={`${proto.token_proto} cover`} onClick={handleClick} />\r\n                        <span>-{proto.diff}%</span>\r\n                    </Link>\r\n                </ImageWrapper>\r\n            </li>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiscountItem","import { useState, useEffect } from 'react'\r\nimport DiscountItem from './DiscountItem'\r\nimport '../../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { getDiscounts } from '../../utils/apiCalls'\r\nimport { SearchWrapper } from '../../styles/GlobalStyle'\r\n\r\n\r\nfunction DiscountsCollection({ showPopup, setPopup }) {\r\n    const [allProtos, setAllProtos] = useState([])\r\n    const [protos, setProtos] = useState([])\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    async function initPage() {\r\n        setLoading(true)\r\n        const myProtos = await getDiscounts();\r\n        setAllProtos(myProtos)\r\n        setProtos(myProtos)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initPage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(protos)\r\n    }, [protos])\r\n\r\n    const handleInput = (e) => {\r\n        const filteredResult = allProtos.filter((proto) => {\r\n            let metadata = JSON.parse(proto.metadata)\r\n            return metadata.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n        })\r\n\r\n        setProtos(filteredResult)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <SearchWrapper className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a card\" onChange={handleInput} />\r\n            </SearchWrapper>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <ul className=\"list-unstyled\">\r\n                    <div className=\"row\">\r\n                        {Object.keys(protos).map((key) => (\r\n\r\n                            <DiscountItem key={`${protos[key].token_proto}`} proto={protos[key]}></DiscountItem>\r\n                        ))}\r\n                    </div>\r\n                </ul>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default DiscountsCollection","import { useState, useEffect } from 'react'\r\nimport DiscountsCollection from \"../components/Discounts/DiscountsCollection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchDiscounts } from '../utils/getProtoCollection'\r\nimport { CollectionWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Discounts() {\r\n\r\n    const [showPopup, setPopup] = useState(false);\r\n    const [popupCard, setPopupCard] = useState(null)\r\n\r\n    console.log(popupCard)\r\n\r\n    return (\r\n        < >\r\n            <DiscountsCollection showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} setPopupCard={setPopupCard} />\r\n            {showPopup ?\r\n                <Popup showPopup={showPopup} setPopup={setPopup} popupCard={popupCard} />\r\n                : null}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Discounts","import { useState, useEffect } from 'react'\r\nimport Collection from \"../components/Collection\"\r\nimport Popup from '../components/Popup'\r\nimport { fetchProtoCollection } from '../utils/getProtoCollection'\r\nimport { getAllProtos } from '../utils/apiCalls'\r\nimport { CollectionWrapper, BackgroundWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction Browse() {\r\n\r\n    //Dans la page Browse, on affiche la totalité des ordres (uniques) en \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Collection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Browse","\r\nimport { useState, useEffect } from 'react'\r\nimport { getLastTradesData, getOrdersHistory, getLastTrades } from '../utils/apiCalls'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nfunction NewOwners({ proto, quality }) {\r\n\r\n    const WhiteText = styled.table`\r\n        color:white;\r\n\r\n    `\r\n\r\n    const [trades, setTrades] = useState([])\r\n\r\n    async function init() {\r\n        try {\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${quality}`]\r\n                }\r\n            );\r\n            const tradesData = await getLastTradesData(json);\r\n            setTrades(tradesData.slice(0, 5))\r\n        } catch (err) { console.log(err) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n        console.log(trades)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <WhiteText className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Owner</th>\r\n                        <th scope=\"col\">Buy price</th>\r\n                        <th scope=\"col\">available time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {trades.map((trade) => (\r\n                        <tr>\r\n\r\n                            <td><Link to={`/godsunchained/user/${trade.owner}`}>\r\n                                {trade.owner}\r\n                            </Link>\r\n                            </td>\r\n                            <td>{trade.price}</td>\r\n                            <td>{trade.uptime}</td>\r\n                        </tr>\r\n                    ))\r\n                    }\r\n                </tbody>\r\n            </WhiteText>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewOwners;","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\n\r\n\r\nfunction GeneralTab({ proto, quality, id, orders, price, getQuality }) {\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    async function handleBuy(e) {\r\n        try {\r\n            await fillOrder(e.target.value);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Pcontainer>\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-avg\"} />\r\n\r\n            </Pcontainer>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <p>For sale:\r\n                    {orders.map((order) => {\r\n                        return (\r\n                            <p><BuyButton value={order.order_id} onClick={handleBuy}>{order.buy.data.quantity} USD </BuyButton></p>\r\n                        )\r\n                    }\r\n                    )}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralTab","import styled from \"styled-components\";\r\nimport Chart from '../Chart'\r\nimport { BuyButton } from '../../styles/GlobalStyle'\r\nimport { fillOrder } from '../../utils/ImmutableXConnection'\r\nimport '../../styles/details.css'\r\nimport NewOwners from \"../NewOwners\";\r\n\r\n\r\nfunction DetailedTab({ proto, quality, id, orders, price, getQuality }) {\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex align-items-center\">\r\n                <img className='nft-item-cover' src={`https://card.godsunchained.com/?id=${proto}&q=${quality}`} alt={`${id} cover`} />\r\n                <div>\r\n                    <span>Last trades : </span>\r\n\r\n                    <NewOwners proto={proto} quality={getQuality(quality)} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Pcontainer>\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"month-detailed\"} />\r\n                <Chart proto={proto} quality={getQuality(quality)} type={\"week-detailed\"} />\r\n\r\n            </Pcontainer>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailedTab","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getCheapestUSDSellOrders } from '../utils/apiCalls'\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport styled from \"styled-components\";\r\nimport Chart from '../components/Chart'\r\nimport { BuyButton, Parallax } from '../styles/GlobalStyle'\r\nimport { fillOrder } from '../utils/ImmutableXConnection'\r\nimport '../styles/details.css'\r\nimport NewOwners from \"../components/NewOwners\";\r\nimport GeneralTab from '../components/Details/GeneralTab'\r\nimport DetailedTab from '../components/Details/DetailedTab'\r\n\r\n\r\n\r\n\r\n\r\nfunction Details() {\r\n\r\n\r\n\r\n\r\n    const Pcontainer = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content : center;\r\n    align-items:center;\r\n    @media (max-width: 900px) {\r\n      flex-direction: column;\r\n    }\r\n  `\r\n\r\n    var qualities = {\r\n        4: \"Meteorite\",\r\n        3: \"Shadow\",\r\n        2: \"Gold\",\r\n        1: \"Diamond\"\r\n    };\r\n\r\n    const getQuality = (key) => { return qualities[key] }\r\n\r\n    const { id } = useParams();\r\n    const [proto, quality] = id.split('-')\r\n\r\n    const [price, setPrice] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const [toggleState, setToggleState] = useState(1);\r\n    const toggleTab = (index) => {\r\n        setToggleState(index);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    async function init() {\r\n        setLoading(true)\r\n        try {\r\n            setError(false)\r\n            //get best price for this card\r\n            const json = JSON.stringify(\r\n                {\r\n                    \"proto\": [`${proto}`],\r\n                    \"quality\": [`${getQuality(quality)}`]\r\n                }\r\n            );\r\n            let { orders } = await getCheapestUSDSellOrders(json)\r\n            setOrders(orders)\r\n            setPrice(orders[0].buy.data.quantity)\r\n            if (orders[0].orderID === null) {\r\n                setError(true)\r\n            }\r\n\r\n        } catch (err) {\r\n            setError(true);\r\n            console.log(err)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <Parallax>\r\n            {isLoading ?\r\n                <div className=\"container d-flex justify-content-center\">\r\n                    <Spinner animation=\"grow\" /> </div>\r\n                :\r\n                error ? <h5>this card is not available for trade</h5> :\r\n\r\n                    <div>\r\n                        <div className=\"bloc-tabs\" style={{ \"background-color\": \"transparent\" }}>\r\n                            <button\r\n                                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(1)}\r\n                            >\r\n                                General info\r\n                            </button>\r\n                            <button\r\n                                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\r\n                                onClick={() => toggleTab(2)}\r\n                            >\r\n                                Detailed Info\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"content-tabs\" style={{ \"background-color\": \"transparent\" }}>\r\n                            <div\r\n                                className={toggleState === 1 ? \"content  active-content\" : \"content\"} style={{ \"background-color\": \"transparent\" }}\r\n                            >\r\n                                <GeneralTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                            <div\r\n                                className={toggleState === 2 ? \"content  active-content\" : \"content\"} style={{ \"background-color\": \"transparent\" }}\r\n                            >\r\n                                <DetailedTab proto={proto} quality={quality} id={id} orders={orders} price={price} getQuality={getQuality} />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n            }\r\n        </Parallax>\r\n    )\r\n\r\n}\r\n\r\nexport default Details","import { useState, useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport { getEthPrice, getAllProtos } from '../../utils/apiCalls'\r\nimport totalprotos from '../../assets/totalprotos.json'\r\n\r\n\r\nconst useGetNFTs = (address) => {\r\n\r\n\r\n    const [data, setData] = useState([]);\r\n    //const [allPrices, setAllPrices] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [statePoints, setPoints] = useState(0)\r\n\r\n    var points = 0;\r\n\r\n    /**\r\n     * Retourne la liste des prix de chaque proto\r\n     */\r\n    const getAllPrices = async () => {\r\n        const ethPrice = localStorage.getItem('ethPrice')\r\n        const protos = await getAllProtos();\r\n        protos.forEach((proto) => proto.price = (proto.takerAssetAmount * Math.pow(10, -18) * ethPrice).toFixed(2))\r\n        return protos\r\n    }\r\n    /**\r\n     * \r\n     * @returns {data} la liste de tous les NFT présents sur ImmuX pour l'utilisateur sous forme\r\n     * \"result\": [\r\n            {\r\n                \"token_address\": \"0xacb3c6a43d15b907e8433077b6d38ae40936fe2c\",\r\n                \"id\": \"0x03c53584ad15429d51fa2460e2578868bccd1ce2628741e573837c2a01e198e1\",\r\n                \"user\": \"0x8205aa128988277979ea0fe327f48ce9682f7cc4\",\r\n                \"status\": \"imx\",\r\n                \"uri\": null,\r\n                \"name\": \"Blessing of Death\",\r\n                \"description\": null,\r\n                \"image_url\": \"https://card.godsunchained.com/?id=932&q=4\",\r\n                \"metadata\": {\r\n                    \"god\": \"death\",\r\n                    \"set\": \"trial\",\r\n                    \"mana\": 2,\r\n                    \"name\": \"Blessing of Death\",\r\n                    \"type\": \"card\",\r\n                    \"image\": \"https://card.godsunchained.com/?id=932&q=4\",\r\n                    \"proto\": 932,\r\n                    \"attack\": 0,\r\n                    \"effect\": \"Your relic gains: \\\"Whenever a creature dies, gain 3 favor.\\\"\",\r\n                    \"health\": 0,\r\n                    \"rarity\": \"common\",\r\n                    \"quality\": \"Meteorite\"\r\n                },\r\n                \"collection\": {\r\n                    \"name\": \"Gods Unchained\",\r\n                    \"icon_url\": null\r\n                },\r\n                \"created_at\": \"2021-03-29T18:53:35.608486Z\",\r\n                \"updated_at\": \"2021-07-22T06:23:26.350774Z\"\r\n            },\r\n            ]\r\n     *  \r\n     */\r\n    const getAllAssets = async () => {\r\n        let cursor;\r\n        let data = [];\r\n        const ethPrice = await getEthPrice();\r\n        localStorage.setItem('ethPrice', ethPrice)\r\n\r\n        do {\r\n            let config = {\r\n                params: {\r\n                    'cursor': cursor,\r\n                    'user': address,\r\n                    'order_by': 'updated_at',\r\n                    'direction': 'desc',\r\n                },\r\n            }\r\n            const url = 'https://api.x.immutable.com/v1/assets'\r\n            const response = await axios.get(url, config)\r\n            const result = response.data\r\n            const resData = result.result;\r\n            cursor = result.cursor;\r\n            data = data.concat(resData)\r\n        } while (cursor)\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {*} asset le NFT dont on veut récupérer le prix d'acquisition\r\n     */\r\n    const getPriceInfo = async (asset, allPrices) => {\r\n\r\n        try {\r\n            const ethPrice = localStorage.getItem('ethPrice');\r\n\r\n            let config = {\r\n                params: {\r\n                    'page_size': 20,\r\n                    'buy_token_address': '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',\r\n                    'buy_token_id': asset.id,\r\n                    'order_by': 'timestamp',\r\n                    'direction': 'desc'\r\n                },\r\n            }\r\n            const url = 'https://api.x.immutable.com/v1/orders'\r\n            const response = await axios.get(url, config)\r\n            const result = response.data.result[0].amount_sold\r\n            const proto = response.data.result[0].buy.data.properties.image_url.split(\"id=\")[1].split(\"&q=\").join(\"-\")\r\n            const price = (result * Math.pow(10, -18) * ethPrice).toFixed(2)\r\n            points += totalprotos[proto][\"points\"]\r\n            asset.token_proto = proto;\r\n            asset.buyPrice = price;\r\n            asset.actualPrice = getActualPrice(asset.token_proto, allPrices)\r\n            asset.diffPrice = (+asset.actualPrice - +asset.buyPrice).toFixed(2)\r\n            //getActualPrice();\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            asset.token_proto = undefined;\r\n            asset.buyPrice = undefined;\r\n            asset.actualPrice = undefined;\r\n            asset.diffPrice = undefined;\r\n        }\r\n        return null;\r\n\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {*} token_proto \r\n     * @param {*} allPrices la liste des prix actuels\r\n     * @returns le prix du proto analysé\r\n     */\r\n    const getActualPrice = (token_proto, allPrices) => {\r\n        try {\r\n            return (allPrices.filter((proto) => proto.token_proto === token_proto)[0].price)\r\n        } catch (err) {\r\n            console.log(err)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    const iterOnAssets = async (assets, allPrices) => {\r\n\r\n        for (const asset of assets) {\r\n\r\n            //Pour chaque asset, on lui rajoute une propriété token_proto, buyPrice, actualPrice, diffPrice\r\n\r\n            await getPriceInfo(asset, allPrices)\r\n        };\r\n        return;\r\n    }\r\n\r\n    async function init() {\r\n        try {\r\n            setLoading(true)\r\n            // On récupère les prix par proto\r\n            const allPrices = await getAllPrices();\r\n            //On récupère la liste des assets, telle que retournée par l'API\r\n            const assets = await getAllAssets();\r\n            await iterOnAssets(assets, allPrices);\r\n            setData(assets)\r\n            setPoints(points)\r\n            setLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    return { data: data, isLoading: isLoading, points: statePoints /*allPrices: allPrices*/ }\r\n}\r\n\r\nexport default useGetNFTs","import useCard from \"./useCard\";\r\nimport Item from \"../Item\";\r\nimport { CardWrapper } from '../../styles/GlobalStyle'\r\n\r\nfunction Card({ data }) {\r\n\r\n\r\n\r\n\r\n    return (\r\n        <CardWrapper className=\"col\">\r\n            {(data.token_proto && data.buyPrice !== undefined) && (\r\n                <div>\r\n                    <Item key={`${data.token_proto}`} proto={data} />\r\n                    <p>buying price : {data.buyPrice} </p>\r\n                    <span> actual price : {data.actualPrice}</span>\r\n                    <span> diff : {data.diffPrice}</span>\r\n\r\n                </div>)\r\n            }\r\n\r\n\r\n        </CardWrapper>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nconst useWalletData = (assets) => {\r\n\r\n    const [investment, setInvestment] = useState(0);\r\n    const [values, setValues] = useState(0);\r\n    const [roi, setRoi] = useState(0);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n\r\n    const getWalletData = (assets) => {\r\n\r\n        setLoading(true)\r\n\r\n        var sumBuyPrice = 0;\r\n        var sumValues = 0;\r\n        var sumDiff = 0;\r\n\r\n        assets.forEach((asset) => {\r\n            if (asset.buyPrice && asset.actualPrice && asset.diffPrice !== undefined) {\r\n                sumBuyPrice += +asset.buyPrice;\r\n                sumValues += +asset.actualPrice;\r\n                sumDiff += +asset.diffPrice;\r\n            }\r\n        });\r\n\r\n        setInvestment(sumBuyPrice)\r\n        setValues(sumValues)\r\n        setRoi(sumDiff)\r\n        setLoading(false)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWalletData(assets);\r\n    }, []);\r\n\r\n    return { investment: investment, values: values, roi: roi, }\r\n\r\n}\r\n\r\nexport default useWalletData","import useWalletData from './useWalletData'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nfunction WalletData({ assets, points }) {\r\n    const { investment, values, roi, isLoading } = useWalletData(assets);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <>\r\n                    investment : {investment.toFixed(2)},\r\n                    value : {values.toFixed(2)},\r\n                    roi : {roi.toFixed(2)}\r\n                    points : {points.toFixed(2)},\r\n                    estimated IMX airdrop : {(400000 * points / 70284757).toFixed(2)}\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WalletData","import { useState, useEffect } from 'react'\r\nimport useGetNFTs from './useGetNFTs'\r\nimport Card from './Card'\r\nimport WalletData from './WalletData'\r\nimport '../../styles/Collection.css'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { SearchWrapper, Parallax } from '../../styles/GlobalStyle'\r\n\r\n\r\n\r\nfunction CardsList({ address }) {\r\n\r\n    /**\r\n     * useGetNFTs retourne une liste de toutes les cartes détenues par le compe en question\r\n     * sous forme : \r\n     * [\r\n     *      {   \r\n     *      actualPrice: \"0.58\"\r\n            buyPrice: \"0.51\"\r\n            collection: {name: \"Gods Unchained\", icon_url: null}\r\n            created_at: \"2021-04-06T16:39:26.376618Z\"\r\n            description: null\r\n            diffPrice: \"0.07\"\r\n            id: \"0x086821ef4b22e79493e8487265466f21755de7d24b0e34acb77d124b9ae8f443\"\r\n            image_url: \"https://card.godsunchained.com/?id=917&q=3\"\r\n            metadata: {god: \"neutral\", set: \"trial\", mana: 2, name: \"Vow of Champions\", type: \"card\", …}\r\n            name: \"Vow of Champions\"\r\n            status: \"imx\"\r\n            token_address: \"0xacb3c6a43d15b907e8433077b6d38ae40936fe2c\"\r\n            token_proto: \"917-3\"\r\n            updated_at: \"2021-07-22T08:29:39.46108Z\"\r\n            uri: null\r\n            user: \"0xc137fba1f3438f2512b035e2d16274421d0249db\"\r\n     *      }\r\n     * ]\r\n     */\r\n    const { data: userCards, isLoading, points } = useGetNFTs(address);\r\n\r\n    const [searchParam, setSearchParam] = useState('');\r\n\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setSearchParam(e.target.value.toLowerCase())\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <SearchWrapper className=\"container d-flex justify-content-center\">\r\n                <input type=\"text\" placeholder=\"Search a proto\" onChange={handleInput} />\r\n            </SearchWrapper>\r\n            {isLoading ? <div className=\"container d-flex justify-content-center\">\r\n                <Spinner animation=\"grow\" /> </div> :\r\n                <>\r\n                    <WalletData assets={userCards} points={points} />\r\n                    <ul className=\"list-unstyled\">\r\n                        <div className=\"row\">\r\n                            {userCards.map((card) => (\r\n\r\n                                card.metadata.name.toLowerCase().includes(searchParam) && <Card data={card} />\r\n                            )\r\n                            )}\r\n                        </div>\r\n                    </ul>\r\n                </>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardsList","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport CardsList from \"../components/Users/CardsList\";\r\nimport { CollectionWrapper } from '../styles/GlobalStyle'\r\n\r\nfunction User() {\r\n\r\n    const { id: address } = useParams();\r\n    return (\r\n        <>\r\n            <CardsList address={address} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport LinkWrapper from './components/LinkWrapper';\r\nimport Home from './pages/Home'\r\nimport Account from './pages/Account'\r\nimport Header from './components/Header'\r\nimport Discounts from './pages/Discounts'\r\nimport Browse from './pages/Browse'\r\nimport Details from './pages/Details'\r\nimport User from './pages/User'\r\nimport './styles/all.css'\r\nimport { Parallax } from './styles/GlobalStyle'\r\n\r\nimport { LoggedProvider } from './utils/context'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<LoggedProvider>\r\n\t\t\t\t<Parallax>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<Route exact path=\"/godsunchained\">\r\n\t\t\t\t\t\t<Redirect to=\"/godsunchained/browse\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/godsunchained/browse\">\r\n\t\t\t\t\t\t<Browse />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/godsunchained/account\">\r\n\t\t\t\t\t\t<Account />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/godsunchained/discounts\">\r\n\t\t\t\t\t\t<Discounts />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/godsunchained/protos/:id\">\r\n\t\t\t\t\t\t<Details />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/godsunchained/user/:id\">\r\n\t\t\t\t\t\t<User />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Parallax>\r\n\t\t\t</LoggedProvider>\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n"],"sourceRoot":""}